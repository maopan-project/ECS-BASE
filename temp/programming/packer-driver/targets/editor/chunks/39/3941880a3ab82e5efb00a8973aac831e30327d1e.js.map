{"version":3,"sources":["file:///D:/File/Cocos/ECS_Demo/assets/src/prefabs/GameActor.ts"],"names":["_decorator","Component","v3","Sprite","SpriteFrame","log","TransformComponent","GameActorMachine","GameActorIdle","GameActorWalk","StateType","MoveComponent","ccclass","property","GameActor","animIdleTime","animWalkTime","entity","moveComp","transformComp","machine","tempVec3","start","getComponent","changeState","update","deltaTime","isMove","checkIsMove","state","type","WALK","IDLE","pos","position","node","set","x","y","z","moveSpeed","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAGZC,MAAAA,E,OAAAA,E;AACAC,MAAAA,M,OAAAA,M;AACAC,MAAAA,W,OAAAA,W;AAIAC,MAAAA,G,OAAAA,G;;AAPAC,MAAAA,kB,iBAAAA,kB;;AAIFC,MAAAA,gB;;AACEC,MAAAA,a,iBAAAA,a;AAAeC,MAAAA,a,iBAAAA,a;AAAeC,MAAAA,S,iBAAAA,S;;AAChCC,MAAAA,a;;;;;;;;;;;;;;;;;OAED;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBb,U;;2BAGjBc,S,WAERD,QAAQ,CAACV,MAAD,C,UAGRU,QAAQ,CAAC,CAACT,WAAD,CAAD,C,UAGRS,QAAQ,CAAC,CAACT,WAAD,CAAD,C,EATZQ,O,qBAAD,MACaE,SADb,SAC+Bb,SAD/B,CACyC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAWrCc,YAXqC,GAWd,CAXc;AAAA,eAarCC,YAbqC,GAad,CAbc;AAAA,eAerCC,MAfqC,GAepB,IAfoB;AAAA,eAiBrCC,QAjBqC,GAiBX,IAjBW;AAAA,eAmBrCC,aAnBqC,GAmBD,IAnBC;AAAA,eAqBrCC,OArBqC,GAqBT,IArBS;AAAA,eAiC7BC,QAjC6B,GAiClBnB,EAAE,EAjCgB;AAAA;;AAuBrCoB,QAAAA,KAAK,GAAG;AACJ,eAAKH,aAAL,GAAqB,KAAKF,MAAL,CAAYM,YAAZ;AAAA;AAAA,uDAArB;AACA,eAAKL,QAAL,GAAgB,KAAKD,MAAL,CAAYM,YAAZ;AAAA;AAAA,6CAAhB;AAEA,eAAKH,OAAL,GAAe;AAAA;AAAA,oDAAqB,IAArB,CAAf;AAEA,eAAKA,OAAL,CAAaI,WAAb,CAAyB;AAAA;AAAA,+CAAzB;AACH;;AAKDC,QAAAA,MAAM,CAACC,SAAD,EAAoB;AACtB,cAAIC,MAAM,GAAG,KAAKC,WAAL,EAAb;;AAEA,cAAID,MAAM,IAAI,KAAKP,OAAL,CAAaS,KAAb,CAAmBC,IAAnB,IAA2B;AAAA;AAAA,sCAAUC,IAAnD,EAAyD;AACrD,iBAAKX,OAAL,CAAaI,WAAb,CAAyB;AAAA;AAAA,iDAAzB;AACH,WAFD,MAEO,IAAI,CAACG,MAAD,IAAW,KAAKP,OAAL,CAAaS,KAAb,CAAmBC,IAAnB,IAA2B;AAAA;AAAA,sCAAUE,IAApD,EAA0D;AAC7D,iBAAKZ,OAAL,CAAaI,WAAb,CAAyB;AAAA;AAAA,iDAAzB;AACH;;AAGD,cAAIS,GAAG,GAAG,KAAKd,aAAL,CAAmBe,QAA7B;AACA,eAAKC,IAAL,CAAUD,QAAV,GAAqB,KAAKb,QAAL,CAAce,GAAd,CAAkBH,GAAG,CAACI,CAAtB,EAAyBJ,GAAG,CAACK,CAA7B,EAAgCL,GAAG,CAACM,CAApC,CAArB;AACAlC,UAAAA,GAAG,CAAC4B,GAAG,CAACI,CAAL,CAAH;AAEA,eAAKjB,OAAL,CAAaK,MAAb,CAAoBC,SAApB;AACH;;AAEDE,QAAAA,WAAW,GAAG;AACV,iBAAO,KAAKV,QAAL,CAAcsB,SAAd,CAAwBC,MAAxB,GAAiC,CAAxC;AACH;;AAtDoC,O;;;;;iBAGf,I;;;;;;;iBAGE,E;;;;;;;iBAGA,E","sourcesContent":["import { _decorator, Component, Node } from 'cc';\r\nimport { Entity } from '../ecs/framework/Entity';\r\nimport { TransformComponent } from '../ecs/components/TransformComponent';\r\nimport { v3 } from 'cc';\r\nimport { Sprite } from 'cc';\r\nimport { SpriteFrame } from 'cc';\r\nimport GameActorMachine from '../state-machine/GameActorMachine';\r\nimport { GameActorIdle, GameActorWalk, StateType } from '../state-machine/GameActorState';\r\nimport MoveComponent from '../ecs/components/MoveCompoent';\r\nimport { log } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass\r\nexport class GameActor extends Component {\r\n\r\n    @property(Sprite)\r\n    spriteActor: Sprite = null;\r\n\r\n    @property([SpriteFrame])\r\n    sfIdle: SpriteFrame[] = [];\r\n\r\n    @property([SpriteFrame])\r\n    sfWalk: SpriteFrame[] = [];\r\n\r\n    animIdleTime: number = 1;\r\n\r\n    animWalkTime: number = 1;\r\n\r\n    entity: Entity = null;\r\n\r\n    moveComp: MoveComponent = null;\r\n\r\n    transformComp: TransformComponent = null;\r\n\r\n    machine: GameActorMachine = null;\r\n\r\n    start() {\r\n        this.transformComp = this.entity.getComponent(TransformComponent);\r\n        this.moveComp = this.entity.getComponent(MoveComponent);\r\n\r\n        this.machine = new GameActorMachine(this);\r\n\r\n        this.machine.changeState(new GameActorIdle());\r\n    }\r\n\r\n\r\n    private tempVec3 = v3();\r\n\r\n    update(deltaTime: number) {\r\n        let isMove = this.checkIsMove();\r\n\r\n        if (isMove && this.machine.state.type != StateType.WALK) {\r\n            this.machine.changeState(new GameActorWalk());\r\n        } else if (!isMove && this.machine.state.type != StateType.IDLE) {\r\n            this.machine.changeState(new GameActorIdle());\r\n        }\r\n\r\n\r\n        let pos = this.transformComp.position;\r\n        this.node.position = this.tempVec3.set(pos.x, pos.y, pos.z);\r\n        log(pos.x);\r\n\r\n        this.machine.update(deltaTime);\r\n    }\r\n\r\n    checkIsMove() {\r\n        return this.moveComp.moveSpeed.length > 0;\r\n    }\r\n}\r\n\r\n\r\n"]}