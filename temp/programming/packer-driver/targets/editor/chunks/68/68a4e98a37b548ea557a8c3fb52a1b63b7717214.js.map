{"version":3,"sources":["file:///F:/ACode/CocosCode/ECS_Demo/assets/src/ecs/framework/Entity.ts"],"names":["Entity","convertComponentTypeIDToIndex","deepClone","isContainSubBits","World","type","oldBits","componentsBits","componentsDirty","components","backupComponents","id","destroyed","addComponent","comp","getBackupComponent","prototype","getComponent","hasComponent","removeComponent","hasComponentBits","bits","getComponentsByIndexes","indexes","componentArr","forEach","idx","push","markComponentDirty","instance","notifyEntityComponentsDirty","cancelDirty","copyComponents","i","length","needBackup","markDestroy","notifyEntityDestroyed"],"mappings":"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","sourcesContent":["import { Component } from \"./Component\";\r\nimport { EntityType } from \"./ECSConfig\";\r\nimport { convertComponentTypeIDToIndex, deepClone, isContainSubBits } from \"./ECSTool\";\r\nimport World from \"./World\";\r\n\r\nexport default class Entity {\r\n    type: EntityType;\r\n    oldBits: number = 0;\r\n    componentsBits: number = 0;\r\n    componentsDirty: boolean = false;\r\n    components: Component[] = [];\r\n    backupComponents: Component[] = [];\r\n    id: number;\r\n    destroyed: boolean = false;\r\n\r\n    addComponent<T extends Component>(type: new () => T): T {\r\n        let comp = new type();\r\n        this.components[convertComponentTypeIDToIndex(comp.type)] = comp;\r\n        this.componentsBits |= comp.type;\r\n        return comp;\r\n    }\r\n\r\n    getBackupComponent<T extends Component>(type: { prototype: T }): T {\r\n        return this.backupComponents[convertComponentTypeIDToIndex(type.prototype.type)] as T;\r\n    }\r\n\r\n    getComponent<T extends Component>(type: { prototype: T }): T {\r\n        return this.components[convertComponentTypeIDToIndex(type.prototype.type)] as T;\r\n    }\r\n\r\n    hasComponent<T extends Component>(type: { prototype: T }): boolean {\r\n        return (this.componentsBits & type.prototype.type) != 0;\r\n    }\r\n\r\n    removeComponent<T extends Component>(type: { prototype: T }) {\r\n        this.components[convertComponentTypeIDToIndex(type.prototype.type)] = null;\r\n        this.componentsBits &= (~type.prototype.type);\r\n    }\r\n\r\n    hasComponentBits(bits: number) {\r\n        return isContainSubBits(bits, this.componentsBits);\r\n    }\r\n\r\n    getComponentsByIndexes(indexes: number[]): Component[] {\r\n        let componentArr: Component[] = [];\r\n\r\n        indexes.forEach(idx => {\r\n            componentArr.push(this.components[idx]);\r\n        });\r\n\r\n        return componentArr;\r\n    }\r\n\r\n    markComponentDirty(oldBits: number) {\r\n        if (!this.componentsDirty) {\r\n            this.oldBits = oldBits;\r\n            World.instance.notifyEntityComponentsDirty(this);\r\n        }\r\n    }\r\n\r\n    cancelDirty() {\r\n        this.componentsDirty = false;\r\n    }\r\n\r\n    copyComponents() {\r\n        for (let i = 0; i < this.components.length; i++) {\r\n            let comp = this.components[i];\r\n            if (!comp || !comp.needBackup) {\r\n                continue;\r\n            }\r\n\r\n            this.backupComponents[i] = deepClone(comp, this.backupComponents[i]) as Component;\r\n        }\r\n    }\r\n\r\n    markDestroy() {\r\n        if (!this.destroyed) {\r\n            World.instance.notifyEntityDestroyed(this);\r\n            this.destroyed = true;\r\n        }\r\n    }\r\n}"]}