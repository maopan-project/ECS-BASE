{"version":3,"sources":["file:///D:/File/Cocos/ECS_Demo/assets/src/EventCenter.ts"],"names":["EventCenter","EventHandler","constructor","_handlers","Map","instance","_ins","on","eventName","func","target","once","handler","obj","has","set","get","add","Set","emit","args","val","values","delete","handle","off","offByTarget","v","size","call"],"mappings":"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","sourcesContent":["export class EventCenter {\r\n    private static _ins: EventCenter = null;\r\n    private constructor() { }\r\n    public static get instance() {\r\n        if (!EventCenter._ins) {\r\n            EventCenter._ins = new EventCenter();\r\n        }\r\n\r\n        return EventCenter._ins;\r\n    }\r\n\r\n    private _handlers: Map<string, Set<EventHandler>> = new Map();\r\n\r\n    on(eventName: string, func: (...args: any[]) => void, target: object, once?: boolean) {\r\n        if (!target || !func || !eventName) {\r\n            return;\r\n        }\r\n\r\n\r\n        let handler = new EventHandler();\r\n        handler.func = func;\r\n        handler.obj = target;\r\n        handler.once = !!once;\r\n\r\n        if (this._handlers.has(eventName)) {\r\n            let set = this._handlers.get(eventName);\r\n            set.add(handler);\r\n\r\n        } else {\r\n            let set = new Set<EventHandler>();\r\n            set.add(handler);\r\n            this._handlers.set(eventName, set);\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    emit(eventName: string, ...args: any[]) {\r\n        if (!this._handlers.has(eventName)) {\r\n            return;\r\n        }\r\n\r\n        let set = this._handlers.get(eventName);\r\n\r\n        for (const val of set.values()) {\r\n            if (val.once) {\r\n                set.delete(val);\r\n            }\r\n            \r\n            val.handle(...args);\r\n\r\n        }\r\n    }\r\n\r\n    off(eventName: string) {\r\n        if (!this._handlers.has(eventName)) {\r\n            return;\r\n        }\r\n\r\n        this._handlers.delete(eventName);\r\n    }\r\n\r\n    offByTarget(target: object) {\r\n        for (const val of this._handlers) {\r\n            for (const v of val[1]) {\r\n                if (v.obj === target) {\r\n                    v.off();\r\n                    val[1].delete(v);\r\n                }\r\n            }\r\n\r\n            if (val[1].size === 0) {\r\n                this._handlers.delete(val[0]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass EventHandler {\r\n    func: Function = () => { };\r\n    obj: object = null;\r\n    once: boolean = false;\r\n\r\n    handle(...args: any[]) {\r\n        this.func.call(this.obj, ...args);\r\n    }\r\n\r\n    off() {\r\n        this.func = null;\r\n        this.obj = null;\r\n    }\r\n}"]}