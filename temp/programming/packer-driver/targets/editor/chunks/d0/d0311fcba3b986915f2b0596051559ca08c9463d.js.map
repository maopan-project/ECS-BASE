{"version":3,"sources":["file:///D:/File/Cocos/ECS_Demo/assets/src/ecs/framework/World.ts"],"names":["World","EntityType","SystemType","WorldCycleType","Entity","convertComponentTypeIDToIndex","getComponentsProtoBits","isContainSubBits","GameService","NetworkReceiveComponent","constructor","allEntities","entitiesByForEach","Map","entitiesComponentsDirtyInThisCycle","useEntityID","singletonEntity","netWorkLogicFn","cycleType","Network","newEntitiesInThisCycle","systemInCycle","lastLogicRemainTime","lastFrameUTC","networkUpdateInterval","fixedUpdateInterval","frameDt","logicCycleCount","cycleCount","worldInCycle","instance","_ins","forEach","types","fn","bits","has","onRegisterNewForEach","indexes","type","push","prototype","entities","get","e","getComponentsByIndexes","Set","i","length","entity","hasComponentBits","add","set","addEntityToWorld","id","getEntityByID","entityID","getNewEntity","entityType","getSingletonEntity","Singleton","getSingletonEntityComponent","hasComponent","addComponent","getComponent","addSystemToCycle","system","world","startCycle","Date","now","logicCycleThisCycle","startTime","cycle","RealTime","cycleWithRealTime","cycleWithNetwork","currentUTC","frameTotalTime","getThisFrameTime","logicUpdateCount","Math","floor","LogicBeforePhysics","systems","j","onUpdate","updateEntitiesByForEach","Render","k","End","updateNewEntitiesByForEach","currentTime","oldBits","newBits","componentsBits","containOldBits","containNewBits","delete","cancelDirty","notfiyEntityComponentsDirty"],"mappings":"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","sourcesContent":["import { Component } from \"./Component\";\r\nimport { EntityType, SystemType, WorldCycleType } from \"./ECSConfig\";\r\nimport { Entity } from \"./Entity\";\r\nimport { System } from \"./System\";\r\nimport { convertComponentTypeIDToIndex, getComponentsProtoBits, isContainSubBits } from \"./ECSTool\";\r\nimport GameService from \"../GameService\";\r\nimport NetworkReceiveComponent from \"../components/NetworkComponent\";\r\n\r\nexport class World {\r\n    private constructor() { }\r\n    private static _ins: World = null;\r\n    public static get instance() {\r\n        if (!World._ins) {\r\n            World._ins = new World();\r\n        }\r\n\r\n        return World._ins;\r\n    }\r\n\r\n    private allEntities: Entity[] = [];\r\n    private entitiesByForEach: Map<number, Set<Entity>> = new Map();\r\n    private entitiesComponentsDirtyInThisCycle: Entity[] = [];\r\n    private useEntityID = 0;\r\n    private singletonEntity: Entity = null;\r\n    private netWorkLogicFn: () => number;\r\n\r\n    cycleType: WorldCycleType = WorldCycleType.Network;\r\n    newEntitiesInThisCycle: Entity[] = [];\r\n    systemInCycle: System[][] = [];\r\n    lastLogicRemainTime: number = 0;\r\n    lastFrameUTC: number = 0;\r\n    networkUpdateInterval: number = 0;\r\n    fixedUpdateInterval: number = 0;\r\n    frameDt: number = 0;\r\n    logicCycleCount: number = 0;\r\n    cycleCount: number = 0;\r\n    worldInCycle: boolean = false;\r\n\r\n    forEach(types: { prototype: Component }[], fn: (entity: Entity, ...components: Component[]) => void) {\r\n        let bits = getComponentsProtoBits(types);\r\n\r\n        if (!this.entitiesByForEach.has(bits)) {\r\n            this.onRegisterNewForEach(bits);\r\n        }\r\n\r\n        let indexes: number[] = [];\r\n        types.forEach(type => {\r\n            indexes.push(convertComponentTypeIDToIndex(type.prototype.type));\r\n        });\r\n\r\n        let entities = this.entitiesByForEach.get(bits);\r\n        entities.forEach(e => {\r\n            fn(e, ...e.getComponentsByIndexes(indexes));\r\n        });\r\n    }\r\n\r\n    private onRegisterNewForEach(bits: number) {\r\n        let entities = new Set<Entity>();\r\n\r\n        for (let i = 0; i < this.allEntities.length; i++) {\r\n            const entity = this.allEntities[i];\r\n            if (entity.hasComponentBits(bits)) {\r\n                entities.add(entity);\r\n            }\r\n        }\r\n\r\n        this.entitiesByForEach.set(bits, entities);\r\n    }\r\n\r\n    addEntityToWorld(entity: Entity): void {\r\n        this.useEntityID++;\r\n        entity.id = this.useEntityID;\r\n        this.allEntities.push(entity);\r\n        this.newEntitiesInThisCycle.push(entity);\r\n    }\r\n\r\n    getEntityByID(entityID: number) {\r\n        return this.allEntities[entityID - 1];\r\n    }\r\n\r\n    getNewEntity(entityType: EntityType): Entity {\r\n        let entity = new Entity();\r\n        entity.type = entityType;\r\n        return entity;\r\n    }\r\n\r\n    getSingletonEntity() {\r\n        if (!this.singletonEntity) {\r\n            this.singletonEntity = this.getNewEntity(EntityType.Singleton);\r\n            this.addEntityToWorld(this.singletonEntity);\r\n        }\r\n\r\n        return this, this.singletonEntity;\r\n    }\r\n\r\n    getSingletonEntityComponent<T extends Component>(type: { prototype: T, new(): T }): T {\r\n        let entity = this.getSingletonEntity();\r\n\r\n        if (!entity.hasComponent<T>(type)) {\r\n            entity.addComponent(type);\r\n        }\r\n\r\n        return entity.getComponent<T>(type);\r\n    }\r\n\r\n    addSystemToCycle(system: System): void {\r\n        system.world = this;\r\n\r\n        if (!this.systemInCycle[system.type]) {\r\n            this.systemInCycle[system.type] = [];\r\n        }\r\n\r\n        this.systemInCycle[system.type].push(system);\r\n    }\r\n\r\n    startCycle() {\r\n        this.lastFrameUTC = Date.now();\r\n        this.worldInCycle = true;\r\n        this.cycleCount = 0;\r\n        this.logicCycleCount = 0;\r\n        this.networkUpdateInterval = 1000 / 15;\r\n        this.fixedUpdateInterval = 1000 / 30;\r\n        this.cycleType = WorldCycleType.Network;\r\n        this.netWorkLogicFn = GameService.logicCycleThisCycle;\r\n        this.getSingletonEntityComponent(NetworkReceiveComponent).startTime = Date.now();\r\n    }\r\n\r\n    cycle(): void {\r\n        if (this.cycleType == WorldCycleType.RealTime) {\r\n            this.cycleWithRealTime();\r\n        } else if (this.cycleType == WorldCycleType.Network) {\r\n            this.cycleWithNetwork();\r\n        }\r\n    }\r\n\r\n    cycleWithRealTime(): void {\r\n        let currentUTC = Date.now();\r\n        let frameTotalTime = this.getThisFrameTime(currentUTC);\r\n        let logicUpdateCount = Math.floor(frameTotalTime / this.fixedUpdateInterval);\r\n        this.frameDt = currentUTC - this.lastFrameUTC;\r\n        this.lastFrameUTC = currentUTC;\r\n        this.lastLogicRemainTime = frameTotalTime - (logicUpdateCount * this.fixedUpdateInterval);\r\n\r\n        for (let i = SystemType.Network; i < SystemType.LogicBeforePhysics; i++) {\r\n            let systems = this.systemInCycle[i];\r\n\r\n            if (!systems) {\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < systems.length; j++) {\r\n                let system = systems[j];\r\n                system.onUpdate();\r\n                this.updateEntitiesByForEach();\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < logicUpdateCount; i++) {\r\n            for (let j = SystemType.LogicBeforePhysics; j < SystemType.Render; j++) {\r\n                let systems = this.systemInCycle[j];\r\n\r\n                if (!systems) {\r\n                    continue;\r\n                }\r\n\r\n                for (let k = 0; k < systems.length; k++) {\r\n                    let system = systems[k];\r\n                    system.onUpdate();\r\n                    this.updateEntitiesByForEach();\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = SystemType.Render; i < SystemType.End; i++) {\r\n            let systems = this.systemInCycle[i];\r\n\r\n            if (!systems) {\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < systems.length; j++) {\r\n                let system = systems[j];\r\n                system.onUpdate();\r\n                this.updateEntitiesByForEach();\r\n            }\r\n        }\r\n\r\n        this.updateNewEntitiesByForEach();\r\n\r\n        this.logicCycleCount += logicUpdateCount;\r\n        this.cycleCount++;\r\n    }\r\n\r\n    cycleWithNetwork(): void {\r\n        let currentUTC = Date.now();\r\n        let frameTotalTime = this.getThisFrameTime(currentUTC);\r\n        let logicUpdateCount = this.netWorkLogicFn();\r\n        this.frameDt = currentUTC - this.lastFrameUTC;\r\n        this.lastFrameUTC = currentUTC;\r\n        this.lastLogicRemainTime = frameTotalTime - (logicUpdateCount * this.fixedUpdateInterval);\r\n\r\n        for (let i = SystemType.Network; i < SystemType.LogicBeforePhysics; i++) {\r\n            let systems = this.systemInCycle[i];\r\n\r\n            if (!systems) {\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < systems.length; j++) {\r\n                let system = systems[j];\r\n                system.onUpdate();\r\n                this.updateEntitiesByForEach();\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < logicUpdateCount; i++) {\r\n            this.logicCycleCount++;\r\n\r\n            for (let j = SystemType.LogicBeforePhysics; j < SystemType.Render; j++) {\r\n                let systems = this.systemInCycle[j];\r\n\r\n                if (!systems) {\r\n                    continue;\r\n                }\r\n\r\n                for (let k = 0; k < systems.length; k++) {\r\n                    let system = systems[k];\r\n                    system.onUpdate();\r\n                    this.updateEntitiesByForEach();\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = SystemType.Render; i < SystemType.End; i++) {\r\n            let systems = this.systemInCycle[i];\r\n\r\n            if (!systems) {\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < systems.length; j++) {\r\n                let system = systems[j];\r\n                system.onUpdate();\r\n                this.updateEntitiesByForEach();\r\n            }\r\n        }\r\n\r\n        this.updateNewEntitiesByForEach();\r\n        this.cycleCount++;\r\n    }\r\n\r\n    getThisFrameTime(currentTime: number): number {\r\n        return this.lastLogicRemainTime + currentTime - this.lastFrameUTC;\r\n    }\r\n\r\n    updateEntitiesByForEach(): void {\r\n        for (let i = 0; i < this.entitiesComponentsDirtyInThisCycle.length; i++) {\r\n            let entity = this.entitiesComponentsDirtyInThisCycle[i];\r\n            let oldBits = entity.oldBits;\r\n            let newBits = entity.componentsBits;\r\n\r\n            this.entitiesByForEach.forEach((set, bits) => {\r\n                let containOldBits = isContainSubBits(bits, oldBits);\r\n                let containNewBits = isContainSubBits(bits, newBits);\r\n\r\n                if (containOldBits && !containNewBits) {\r\n                    set.delete(entity);\r\n                } else if (!containNewBits && containNewBits) {\r\n                    set.add(entity);\r\n                }\r\n            });\r\n\r\n            entity.cancelDirty();\r\n        }\r\n\r\n        this.entitiesComponentsDirtyInThisCycle = [];\r\n    }\r\n\r\n    updateNewEntitiesByForEach() {\r\n        for (let i = 0; i < this.newEntitiesInThisCycle.length; i++) {\r\n            let entity = this.newEntitiesInThisCycle[i];\r\n            let newBits = entity.componentsBits;\r\n\r\n            this.entitiesByForEach.forEach((set, bits) => {\r\n                if (isContainSubBits(bits, newBits)) {\r\n                    set.add(entity);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.newEntitiesInThisCycle = [];\r\n    }\r\n\r\n    notfiyEntityComponentsDirty(entity: Entity) {\r\n        this.entitiesComponentsDirtyInThisCycle.push(entity);\r\n    }\r\n}"]}