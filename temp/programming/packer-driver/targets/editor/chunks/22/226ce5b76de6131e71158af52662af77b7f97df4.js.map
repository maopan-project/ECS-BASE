{"version":3,"sources":["file:///D:/File/Cocos/ECS_Demo/assets/src/ecs/framework/World.ts"],"names":["World","EntityType","SystemType","EEntity","convertComponentTypeIDToIndex","getComponentsProtoBits","isContainSubBits","constructor","allEntities","entitiesByForEach","Map","entitiesComponentsDirtyInThisCycle","useEntityID","singletonEntity","newEntitiesInThisCycle","systemInCycle","lastLogicRemainTime","lastFrameUTC","fixedUpdateInterval","frameDt","logicCycleCount","cycleCount","worldInCycle","instance","_ins","forEach","types","fn","bits","has","onRegisterNewForEach","indexes","type","push","prototype","entities","get","e","getComponentsByIndexes","Set","i","length","entity","hasComponentBits","add","set","addEntityToWorld","id","getNewEntity","entityType","getSingletonEntity","Singleton","getSingletonEntityComponent","hasComponent","addComponent","getComponent","addSystemToCycle","system","world","startCycle","Date","now","cycle","currentUTC","frameTotalTime","getThisFrameTime","logicUpdateCount","Math","floor","Network","LogicBeforePhysics","systems","onUpdate","updateEntitiesByForEach","j","Render","k","End","updateNewEntitiesByForEach","currentTime","oldBits","newBits","componentsBits","containOldBits","containNewBits","delete","cancelDirty","notfiyEntityComponentsDirty"],"mappings":"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","sourcesContent":["import { EComponent } from \"./Component\";\r\nimport { EntityType, SystemType } from \"./Config\";\r\nimport { EEntity } from \"./Entity\";\r\nimport { ESystem } from \"./System\";\r\nimport { convertComponentTypeIDToIndex, getComponentsProtoBits, isContainSubBits } from \"./Tool\";\r\n\r\nexport class World {\r\n    private constructor() { }\r\n    private static _ins: World = null;\r\n    public static get instance() {\r\n        if (!World._ins) {\r\n            World._ins = new World();\r\n        }\r\n\r\n        return World._ins;\r\n    }\r\n\r\n    private allEntities: EEntity[] = [];\r\n    private entitiesByForEach: Map<number, Set<EEntity>> = new Map();\r\n    private entitiesComponentsDirtyInThisCycle: EEntity[] = [];\r\n    private useEntityID = 0;\r\n    private singletonEntity: EEntity = null;\r\n\r\n    newEntitiesInThisCycle: EEntity[] = [];\r\n    systemInCycle: ESystem[][] = [];\r\n    lastLogicRemainTime: number = 0;\r\n    lastFrameUTC: number = 0;\r\n    fixedUpdateInterval: number = 0;\r\n    frameDt: number = 0;\r\n    logicCycleCount: number = 0;\r\n    cycleCount: number = 0;\r\n    worldInCycle: boolean = false;\r\n\r\n    forEach(types: { prototype: EComponent }[], fn: (entity: EEntity, ...components: EComponent[]) => void) {\r\n        let bits = getComponentsProtoBits(types);\r\n\r\n        if (!this.entitiesByForEach.has(bits)) {\r\n            this.onRegisterNewForEach(bits);\r\n        }\r\n\r\n        let indexes: number[] = [];\r\n        types.forEach(type => {\r\n            indexes.push(convertComponentTypeIDToIndex(type.prototype.type));\r\n        });\r\n\r\n        let entities = this.entitiesByForEach.get(bits);\r\n        entities.forEach(e => {\r\n            fn(e, ...e.getComponentsByIndexes(indexes));\r\n        });\r\n    }\r\n\r\n    private onRegisterNewForEach(bits: number) {\r\n        let entities = new Set<EEntity>();\r\n\r\n        for (let i = 0; i < this.allEntities.length; i++) {\r\n            const entity = this.allEntities[i];\r\n            if (entity.hasComponentBits(bits)) {\r\n                entities.add(entity);\r\n            }\r\n        }\r\n\r\n        this.entitiesByForEach.set(bits, entities);\r\n    }\r\n\r\n    addEntityToWorld(entity: EEntity): void {\r\n        this.useEntityID++;\r\n        entity.id = this.useEntityID;\r\n        this.allEntities.push(entity);\r\n        this.newEntitiesInThisCycle.push(entity);\r\n    }\r\n\r\n    getNewEntity(entityType: EntityType): EEntity {\r\n        let entity = new EEntity;\r\n        entity.type = entityType;\r\n        return entity;\r\n    }\r\n\r\n    getSingletonEntity() {\r\n        if (!this.singletonEntity) {\r\n            this.singletonEntity = this.getNewEntity(EntityType.Singleton);\r\n            this.addEntityToWorld(this.singletonEntity);\r\n        }\r\n\r\n        return this, this.singletonEntity;\r\n    }\r\n\r\n    getSingletonEntityComponent<T extends EComponent>(type: { prototype: T, new(): T }): T {\r\n        let entity = this.getSingletonEntity();\r\n\r\n        if (!entity.hasComponent<T>(type)) {\r\n            entity.addComponent(type);\r\n        }\r\n\r\n        return entity.getComponent<T>(type);\r\n    }\r\n\r\n    addSystemToCycle(system: ESystem): void {\r\n        system.world = this;\r\n\r\n        if (!this.systemInCycle[system.type]) {\r\n            this.systemInCycle[system.type] = [];\r\n        }\r\n\r\n        this.systemInCycle[system.type].push(system);\r\n    }\r\n\r\n    startCycle() {\r\n        this.lastFrameUTC = Date.now();\r\n        this.worldInCycle = true;\r\n        this.cycleCount = 0;\r\n        this.logicCycleCount = 0;\r\n    }\r\n\r\n    cycle(): void {\r\n        let currentUTC = Date.now();\r\n        let frameTotalTime = this.getThisFrameTime(currentUTC);\r\n        let logicUpdateCount = Math.floor(frameTotalTime / this.fixedUpdateInterval);\r\n        this.frameDt = currentUTC - this.lastFrameUTC;\r\n        this.lastFrameUTC = currentUTC;\r\n        this.lastLogicRemainTime = frameTotalTime - (logicUpdateCount * this.fixedUpdateInterval);\r\n\r\n        for (let i = SystemType.Network; i < SystemType.LogicBeforePhysics; i++) {\r\n            let systems = this.systemInCycle[i];\r\n\r\n            if (!systems) {\r\n                continue;\r\n            }\r\n\r\n            for (let i = 0; i < systems.length; i++) {\r\n                let system = systems[i];\r\n                system.onUpdate();\r\n                this.updateEntitiesByForEach();\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < logicUpdateCount; i++) {\r\n            for (let j = SystemType.LogicBeforePhysics; j < SystemType.Render; j++) {\r\n                let systems = this.systemInCycle[j];\r\n\r\n                if (!systems) {\r\n                    continue;\r\n                }\r\n\r\n                for (let k = 0; k < systems.length; k++) {\r\n                    let system = systems[k];\r\n                    system.onUpdate();\r\n                    this.updateEntitiesByForEach();\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = SystemType.Render; i < SystemType.End; i++) {\r\n            let systems = this.systemInCycle[i];\r\n\r\n            if (!systems) {\r\n                continue;\r\n            }\r\n\r\n            for (let i = 0; i < systems.length; i++) {\r\n                let system = systems[i];\r\n                system.onUpdate();\r\n                this.updateEntitiesByForEach();\r\n            }\r\n        }\r\n\r\n        this.updateNewEntitiesByForEach();\r\n\r\n        this.logicCycleCount += logicUpdateCount;\r\n        this.cycleCount++;\r\n    }\r\n\r\n    getThisFrameTime(currentTime: number): number {\r\n        return this.lastLogicRemainTime + currentTime - this.lastFrameUTC;\r\n    }\r\n\r\n    updateEntitiesByForEach(): void {\r\n        for (let i = 0; i < this.entitiesComponentsDirtyInThisCycle.length; i++) {\r\n            let entity = this.entitiesComponentsDirtyInThisCycle[i];\r\n            let oldBits = entity.oldBits;\r\n            let newBits = entity.componentsBits;\r\n\r\n            this.entitiesByForEach.forEach((set, bits) => {\r\n                let containOldBits = isContainSubBits(bits, oldBits);\r\n                let containNewBits = isContainSubBits(bits, newBits);\r\n\r\n                if (containOldBits && !containNewBits) {\r\n                    set.delete(entity);\r\n                } else if (!containNewBits && containNewBits) {\r\n                    set.add(entity);\r\n                }\r\n            });\r\n\r\n            entity.cancelDirty();\r\n        }\r\n\r\n        this.entitiesComponentsDirtyInThisCycle = [];\r\n    }\r\n\r\n    updateNewEntitiesByForEach() {\r\n        for (let i = 0; i < this.newEntitiesInThisCycle.length; i++) {\r\n            let entity = this.newEntitiesInThisCycle[i];\r\n            let newBits = entity.componentsBits;\r\n\r\n            this.entitiesByForEach.forEach((set, bits) => {\r\n                if (isContainSubBits(bits, newBits)) {\r\n                    set.add(entity);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.newEntitiesInThisCycle = [];\r\n    }\r\n\r\n    notfiyEntityComponentsDirty(entity: EEntity) {\r\n        this.entitiesComponentsDirtyInThisCycle.push(entity);\r\n    }\r\n}"]}