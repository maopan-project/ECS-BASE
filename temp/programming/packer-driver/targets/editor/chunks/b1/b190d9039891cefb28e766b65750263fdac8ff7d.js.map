{"version":3,"sources":["file:///F:/ACode/CocosCode/ECS_Demo/assets/src/ecs/framework/Entity.ts"],"names":["Entity","convertComponentTypeIDToIndex","deepClone","isContainSubBits","World","type","_oldBits","_componentsBits","componentsDirty","components","backupComponents","id","oldBits","componentsBits","addComponent","comp","getBackupComponent","prototype","getComponent","hasComponent","removeComponent","hasComponentBits","bits","getComponentsByIndexes","indexes","componentArr","forEach","idx","push","markComponentDirty","instance","notifyEntityComponentsDirty","cancelDirty","copyComponents","i","length","needBackup"],"mappings":"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","sourcesContent":["import { Component } from \"./Component\";\r\nimport { EntityType } from \"./ECSConfig\";\r\nimport { convertComponentTypeIDToIndex, deepClone, isContainSubBits } from \"./ECSTool\";\r\nimport World from \"./World\";\r\n\r\nexport default class Entity {\r\n    type: EntityType;\r\n\r\n    private _oldBits: number = 0;\r\n\r\n    public get oldBits(): number {\r\n        return this._oldBits;\r\n    }\r\n\r\n    private _componentsBits: number = 0;\r\n\r\n    public get componentsBits(): number {\r\n        return this._componentsBits;\r\n    }\r\n\r\n    componentsDirty: boolean = false;\r\n    components: Component[] = [];\r\n    backupComponents: Component[] = [];\r\n    id: number;\r\n\r\n    addComponent<T extends Component>(type: new () => T): T {\r\n        let comp = new type();\r\n        this.components[convertComponentTypeIDToIndex(comp.type)] = comp;\r\n        this._componentsBits |= comp.type;\r\n        return comp;\r\n    }\r\n\r\n    getBackupComponent<T extends Component>(type: { prototype: T }): T {\r\n        return this.backupComponents[convertComponentTypeIDToIndex(type.prototype.type)] as T;\r\n    }\r\n\r\n    getComponent<T extends Component>(type: { prototype: T }): T {\r\n        return this.components[convertComponentTypeIDToIndex(type.prototype.type)] as T;\r\n    }\r\n\r\n    hasComponent<T extends Component>(type: { prototype: T }): boolean {\r\n        return (this.componentsBits & type.prototype.type) != 0;\r\n    }\r\n\r\n    removeComponent<T extends Component>(type: { prototype: T }) {\r\n        this.components[convertComponentTypeIDToIndex(type.prototype.type)] = null;\r\n        this._componentsBits &= (~type.prototype.type);\r\n    }\r\n\r\n    hasComponentBits(bits: number) {\r\n        return isContainSubBits(bits, this._componentsBits);\r\n    }\r\n\r\n    getComponentsByIndexes(indexes: number[]): Component[] {\r\n        let componentArr: Component[] = [];\r\n\r\n        indexes.forEach(idx => {\r\n            componentArr.push(this.components[idx]);\r\n        });\r\n\r\n        return componentArr;\r\n    }\r\n\r\n    markComponentDirty(oldBits: number) {\r\n        if (!this.componentsDirty) {\r\n            this._oldBits = oldBits;\r\n            World.instance.notifyEntityComponentsDirty(this);\r\n        }\r\n    }\r\n\r\n    cancelDirty() {\r\n        this.componentsDirty = false;\r\n    }\r\n\r\n    copyComponents() {\r\n        for (let i = 0; i < this.components.length; i++) {\r\n            let comp = this.components[i];\r\n            if (!comp || !comp.needBackup) {\r\n                continue;\r\n            }\r\n\r\n            this.backupComponents[i] = deepClone(comp, this.backupComponents[i]) as Component;\r\n        }\r\n    }\r\n}"]}