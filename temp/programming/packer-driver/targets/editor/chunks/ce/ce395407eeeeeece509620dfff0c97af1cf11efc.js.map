{"version":3,"sources":["file:///F:/ACode/CocosCode/ECS_Demo/assets/src/GameStart.ts"],"names":["_decorator","Component","Input","input","KeyCode","Label","MoveComponent","NetworkReceiveComponent","TransformComponent","EntityType","World","GameService","EventCenter","Vector3","GameMessageC2S_GameStart","GameMessageC2S_Operation","GameMessageType","MessagePool","WSClient","FireComponent","ccclass","property","GameStart","_keyMap","Map","uid","selfEntityID","isInGame","lastDir","lastIsFire","onClickGameStart","instance","send","onLoad","on","EventType","KEY_DOWN","keyDown","KEY_UP","keyUp","S2C_GAME_START","toString","onGetGameStart","S2C_OPERATIONS","onGetOperations","S2C_UID","onGetUID","start","set","KEY_A","KEY_S","KEY_D","KEY_W","SPACE","connect","update","deltaTime","cycle","sendOp","x","y","get","isFire","msg","entityID","body","dir","recycle","event","has","keyCode","initWorld","uids","forEach","index","addPlayer","startCycle","nrc","getSingletonEntityComponent","msgToDeal","push","lbUserID","string","console","log","player","getNewEntity","Actor","addComponent","addEntityToWorld","id"],"mappings":"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","sourcesContent":["import { _decorator, Component, EventKeyboard, Input, input, KeyCode, Label } from 'cc';\r\nimport MoveComponent from './ecs/components/MoveComponent';\r\nimport NetworkReceiveComponent from './ecs/components/NetworkComponent';\r\nimport TransformComponent from './ecs/components/TransformComponent';\r\nimport { EntityType } from './ecs/framework/ECSConfig';\r\nimport World from './ecs/framework/World';\r\nimport GameService from './ecs/GameService';\r\nimport { EventCenter } from './event/EventCenter';\r\nimport { Vector3 } from './GameType';\r\nimport { GameMessageC2S_GameStart, GameMessageC2S_Operation, GameMessageS2C_GameStart, GameMessageS2C_Operations, GameMessageS2C_UID, GameMessageType, MessagePool } from './network/GameMessage';\r\nimport { WSClient } from './network/WSClient';\r\nimport FireComponent from './ecs/components/FireComponent';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass\r\nexport class GameStart extends Component {\r\n    @property(Label)\r\n    lbUserID: Label = null;\r\n\r\n    private _keyMap: Map<KeyCode, boolean> = new Map();\r\n\r\n    uid: number = 0;\r\n    selfEntityID: number = 0;\r\n    isInGame: boolean = false;\r\n    lastDir: Vector3 = new Vector3();\r\n    lastIsFire: boolean = false;\r\n\r\n    onClickGameStart() {\r\n        WSClient.instance.send(new GameMessageC2S_GameStart);\r\n    }\r\n\r\n    protected onLoad(): void {\r\n        input.on(Input.EventType.KEY_DOWN, this.keyDown, this);\r\n        input.on(Input.EventType.KEY_UP, this.keyUp, this);\r\n\r\n        EventCenter.instance.on(GameMessageType.S2C_GAME_START.toString(), this.onGetGameStart, this);\r\n        EventCenter.instance.on(GameMessageType.S2C_OPERATIONS.toString(), this.onGetOperations, this);\r\n        EventCenter.instance.on(GameMessageType.S2C_UID.toString(), this.onGetUID, this);\r\n    }\r\n\r\n    protected start() {\r\n        this._keyMap.set(KeyCode.KEY_A, false);\r\n        this._keyMap.set(KeyCode.KEY_S, false);\r\n        this._keyMap.set(KeyCode.KEY_D, false);\r\n        this._keyMap.set(KeyCode.KEY_W, false);\r\n        this._keyMap.set(KeyCode.SPACE, false);\r\n\r\n        WSClient.instance.connect();\r\n    }\r\n\r\n    protected update(deltaTime: number) {\r\n        if (this.isInGame) {\r\n            World.instance.cycle();\r\n            this.sendOp();\r\n        }\r\n    }\r\n\r\n    private sendOp() {\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        if (this._keyMap.get(KeyCode.KEY_A))\r\n            x -= 1;\r\n\r\n        if (this._keyMap.get(KeyCode.KEY_S))\r\n            y -= 1;\r\n\r\n        if (this._keyMap.get(KeyCode.KEY_D))\r\n            x += 1;\r\n\r\n        if (this._keyMap.get(KeyCode.KEY_W))\r\n            y += 1;\r\n\r\n        let isFire = this._keyMap.get(KeyCode.SPACE);\r\n\r\n\r\n        if ((this.lastDir.x != x || this.lastDir.y != y) || isFire != this.lastIsFire) {\r\n            this.lastDir.set(x, y);\r\n            this.lastIsFire = isFire;\r\n\r\n            let msg = MessagePool.get(GameMessageC2S_Operation);\r\n            msg.uid = this.uid;\r\n            msg.entityID = this.selfEntityID;\r\n            msg.body.dir.set(x, y);\r\n            msg.body.isFire = isFire;\r\n\r\n            WSClient.instance.send(msg);\r\n\r\n            MessagePool.recycle(msg);\r\n        }\r\n\r\n    }\r\n\r\n    private keyDown(event: EventKeyboard): void {\r\n        if (this._keyMap.has(event.keyCode)) {\r\n            this._keyMap.set(event.keyCode, true);\r\n        }\r\n    }\r\n\r\n    private keyUp(event: EventKeyboard): void {\r\n        if (this._keyMap.has(event.keyCode)) {\r\n            this._keyMap.set(event.keyCode, false);\r\n        }\r\n    }\r\n\r\n    private onGetGameStart(msg: GameMessageS2C_GameStart) {\r\n\r\n        GameService.initWorld();\r\n\r\n        msg.uids.forEach((uid, index) => {\r\n            this.addPlayer(uid);\r\n        });\r\n\r\n        this.lastDir.set(1, 1);\r\n        this.isInGame = true;\r\n        World.instance.startCycle();\r\n    }\r\n\r\n    private onGetOperations(msg: GameMessageS2C_Operations) {\r\n        let nrc = World.instance.getSingletonEntityComponent(NetworkReceiveComponent);\r\n        nrc.msgToDeal.push(msg);\r\n    }\r\n\r\n    private onGetUID(msg: GameMessageS2C_UID) {\r\n        this.uid = msg.uid;\r\n        this.lbUserID.string = 'user:' + this.uid.toString();\r\n    }\r\n\r\n    private addPlayer(uid: number) {\r\n        console.log('add player', uid);\r\n        let player = World.instance.getNewEntity(EntityType.Actor);\r\n        player.addComponent(MoveComponent);\r\n        player.addComponent(TransformComponent);\r\n        player.addComponent(FireComponent);\r\n        World.instance.addEntityToWorld(player);\r\n\r\n        if (uid === this.uid) {\r\n            this.selfEntityID = player.id;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n"]}