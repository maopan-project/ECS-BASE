{"version":3,"sources":["file:///F:/ACode/CocosCode/ECS_Demo/assets/src/ecs/framework/World.ts"],"names":["World","GameService","NetworkReceiveComponent","EntityType","SystemType","WorldCycleType","convertComponentTypeIDToIndex","getComponentsProtoBits","isContainSubBits","Entity","constructor","allEntities","entitiesByForEach","Map","entitiesComponentsDirtyInThisCycle","useEntityID","singletonEntity","netWorkLogicFn","cycleType","Network","newEntitiesInThisCycle","systemInCycle","lastLogicRemainTime","lastFrameUTC","networkUpdateInterval","fixedUpdateInterval","frameDt","logicCycleCount","cycleCount","worldInCycle","uiLerpValue","instance","_ins","forEach","types","fn","bits","has","onRegisterNewForEach","indexes","type","push","prototype","entities","get","e","getComponentsByIndexes","Set","i","length","entity","hasComponentBits","add","set","addEntityToWorld","id","copyComponents","getEntityByID","entityID","getNewEntity","entityType","getSingletonEntity","Singleton","getSingletonEntityComponent","hasComponent","addComponent","getComponent","addSystemToCycle","system","world","startCycle","Date","now","logicCycleThisCycle","startTime","cycle","RealTime","cycleWithRealTime","cycleWithNetwork","currentUTC","frameTotalTime","getThisFrameTime","logicUpdateCount","Math","floor","LogicBeforePhysics","systems","j","onUpdate","updateEntitiesByForEach","Render","k","End","updateNewEntitiesByForEach","backupEntityComponents","lastFrameTime","updateUILerpValue","value","min","currentTime","oldBits","newBits","componentsBits","containOldBits","containNewBits","delete","cancelDirty","notifyEntityComponentsDirty"],"mappings":"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","sourcesContent":["import GameService from \"../GameService\";\r\nimport NetworkReceiveComponent from \"../components/NetworkComponent\";\r\nimport { Component } from \"./Component\";\r\nimport { EntityType, SystemType, WorldCycleType } from \"./ECSConfig\";\r\nimport { convertComponentTypeIDToIndex, getComponentsProtoBits, isContainSubBits } from \"./ECSTool\";\r\nimport Entity from \"./Entity\";\r\nimport System from \"./System\";\r\n\r\nexport default class World {\r\n    private constructor() { }\r\n    private static _ins: World = null;\r\n    public static get instance() {\r\n        if (!World._ins) {\r\n            World._ins = new World();\r\n        }\r\n\r\n        return World._ins;\r\n    }\r\n\r\n    private allEntities: Entity[] = [];\r\n    private entitiesByForEach: Map<number, Set<Entity>> = new Map();\r\n    private entitiesComponentsDirtyInThisCycle: Entity[] = [];\r\n    private useEntityID = 0;\r\n    private singletonEntity: Entity = null;\r\n    private netWorkLogicFn: () => number;\r\n\r\n    cycleType: WorldCycleType = WorldCycleType.Network;\r\n    newEntitiesInThisCycle: Entity[] = [];\r\n    systemInCycle: System[][] = [];\r\n    lastLogicRemainTime: number = 0;\r\n    lastFrameUTC: number = 0;\r\n    networkUpdateInterval: number = 0;\r\n    fixedUpdateInterval: number = 0;\r\n    frameDt: number = 0;\r\n    logicCycleCount: number = 0;\r\n    cycleCount: number = 0;\r\n    worldInCycle: boolean = false;\r\n    uiLerpValue: number = 0;\r\n\r\n    forEach(types: { prototype: Component }[], fn: (entity: Entity, ...components: Component[]) => void) {\r\n        let bits = getComponentsProtoBits(types);\r\n\r\n        if (!this.entitiesByForEach.has(bits)) {\r\n            this.onRegisterNewForEach(bits);\r\n        }\r\n\r\n        let indexes: number[] = [];\r\n        types.forEach(type => {\r\n            indexes.push(convertComponentTypeIDToIndex(type.prototype.type));\r\n        });\r\n\r\n        let entities = this.entitiesByForEach.get(bits);\r\n        entities.forEach(e => {\r\n            fn(e, ...e.getComponentsByIndexes(indexes));\r\n        });\r\n    }\r\n\r\n    private onRegisterNewForEach(bits: number) {\r\n        let entities = new Set<Entity>();\r\n\r\n        for (let i = 0; i < this.allEntities.length; i++) {\r\n            const entity = this.allEntities[i];\r\n            if (entity.hasComponentBits(bits)) {\r\n                entities.add(entity);\r\n            }\r\n        }\r\n\r\n        this.entitiesByForEach.set(bits, entities);\r\n    }\r\n\r\n    addEntityToWorld(entity: Entity): void {\r\n        this.useEntityID++;\r\n        entity.id = this.useEntityID;\r\n        entity.copyComponents();\r\n        this.allEntities.push(entity);\r\n        this.newEntitiesInThisCycle.push(entity);\r\n    }\r\n\r\n    getEntityByID(entityID: number) {\r\n        return this.allEntities[entityID - 1];\r\n    }\r\n\r\n    getNewEntity(entityType: EntityType): Entity {\r\n        let entity = new Entity();\r\n        entity.type = entityType;\r\n        return entity;\r\n    }\r\n\r\n    getSingletonEntity() {\r\n        if (!this.singletonEntity) {\r\n            this.singletonEntity = this.getNewEntity(EntityType.Singleton);\r\n            this.addEntityToWorld(this.singletonEntity);\r\n        }\r\n\r\n        return this, this.singletonEntity;\r\n    }\r\n\r\n    getSingletonEntityComponent<T extends Component>(type: { prototype: T, new(): T }): T {\r\n        let entity = this.getSingletonEntity();\r\n\r\n        if (!entity.hasComponent<T>(type)) {\r\n            entity.addComponent(type);\r\n        }\r\n\r\n        return entity.getComponent<T>(type);\r\n    }\r\n\r\n    addSystemToCycle(system: System): void {\r\n        system.world = this;\r\n\r\n        if (!this.systemInCycle[system.type]) {\r\n            this.systemInCycle[system.type] = [];\r\n        }\r\n\r\n        this.systemInCycle[system.type].push(system);\r\n    }\r\n\r\n    startCycle() {\r\n        this.lastFrameUTC = Date.now();\r\n        this.worldInCycle = true;\r\n        this.cycleCount = 0;\r\n        this.logicCycleCount = 0;\r\n        this.networkUpdateInterval = 1000 / 15;\r\n        this.fixedUpdateInterval = 1000 / 30;\r\n        this.cycleType = WorldCycleType.Network;\r\n        this.netWorkLogicFn = GameService.logicCycleThisCycle;\r\n        this.getSingletonEntityComponent(NetworkReceiveComponent).startTime = Date.now();\r\n    }\r\n\r\n    cycle(): void {\r\n        if (this.cycleType == WorldCycleType.RealTime) {\r\n            this.cycleWithRealTime();\r\n        } else if (this.cycleType == WorldCycleType.Network) {\r\n            this.cycleWithNetwork();\r\n        }\r\n    }\r\n\r\n    cycleWithRealTime(): void {\r\n        let currentUTC = Date.now();\r\n        let frameTotalTime = this.getThisFrameTime(currentUTC);\r\n        let logicUpdateCount = Math.floor(frameTotalTime / this.fixedUpdateInterval);\r\n        this.frameDt = currentUTC - this.lastFrameUTC;\r\n        this.lastFrameUTC = currentUTC;\r\n        this.lastLogicRemainTime = frameTotalTime - (logicUpdateCount * this.fixedUpdateInterval);\r\n\r\n        for (let i = SystemType.Network; i < SystemType.LogicBeforePhysics; i++) {\r\n            let systems = this.systemInCycle[i];\r\n\r\n            if (!systems) {\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < systems.length; j++) {\r\n                let system = systems[j];\r\n                system.onUpdate();\r\n                this.updateEntitiesByForEach();\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < logicUpdateCount; i++) {\r\n            for (let j = SystemType.LogicBeforePhysics; j < SystemType.Render; j++) {\r\n                let systems = this.systemInCycle[j];\r\n\r\n                if (!systems) {\r\n                    continue;\r\n                }\r\n\r\n                for (let k = 0; k < systems.length; k++) {\r\n                    let system = systems[k];\r\n                    system.onUpdate();\r\n                    this.updateEntitiesByForEach();\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = SystemType.Render; i < SystemType.End; i++) {\r\n            let systems = this.systemInCycle[i];\r\n\r\n            if (!systems) {\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < systems.length; j++) {\r\n                let system = systems[j];\r\n                system.onUpdate();\r\n                this.updateEntitiesByForEach();\r\n            }\r\n        }\r\n\r\n        this.updateNewEntitiesByForEach();\r\n\r\n        this.logicCycleCount += logicUpdateCount;\r\n        this.cycleCount++;\r\n    }\r\n\r\n    cycleWithNetwork(): void {\r\n        let currentUTC = Date.now();\r\n        let frameTotalTime = this.getThisFrameTime(currentUTC);\r\n        let logicUpdateCount = this.netWorkLogicFn();\r\n        this.frameDt = currentUTC - this.lastFrameUTC;\r\n        this.lastFrameUTC = currentUTC;\r\n        this.lastLogicRemainTime = frameTotalTime - (logicUpdateCount * this.fixedUpdateInterval);\r\n\r\n        for (let i = SystemType.Network; i < SystemType.LogicBeforePhysics; i++) {\r\n            let systems = this.systemInCycle[i];\r\n\r\n            if (!systems) {\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < systems.length; j++) {\r\n                let system = systems[j];\r\n                system.onUpdate();\r\n                this.updateEntitiesByForEach();\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < logicUpdateCount; i++) {\r\n            this.logicCycleCount++;\r\n            this.backupEntityComponents();\r\n\r\n            for (let j = SystemType.LogicBeforePhysics; j < SystemType.Render; j++) {\r\n                let systems = this.systemInCycle[j];\r\n\r\n                if (!systems) {\r\n                    continue;\r\n                }\r\n\r\n                for (let k = 0; k < systems.length; k++) {\r\n                    let system = systems[k];\r\n                    system.onUpdate();\r\n                    this.updateEntitiesByForEach();\r\n                }\r\n            }\r\n        }\r\n\r\n        let lastFrameTime = this.getSingletonEntityComponent(NetworkReceiveComponent).startTime\r\n            + (this.logicCycleCount - 1) * this.fixedUpdateInterval;\r\n        this.updateUILerpValue(lastFrameTime);\r\n\r\n        if (this.logicCycleCount >= 1) {\r\n            for (let i = SystemType.Render; i < SystemType.End; i++) {\r\n                let systems = this.systemInCycle[i];\r\n\r\n                if (!systems) {\r\n                    continue;\r\n                }\r\n\r\n                for (let j = 0; j < systems.length; j++) {\r\n                    let system = systems[j];\r\n                    system.onUpdate();\r\n                    this.updateEntitiesByForEach();\r\n                }\r\n            }\r\n\r\n            this.updateNewEntitiesByForEach();\r\n        }\r\n\r\n        this.cycleCount++;\r\n    }\r\n\r\n    updateUILerpValue(lastFrameTime: number) {\r\n        let value = (Date.now() - lastFrameTime) / this.fixedUpdateInterval;\r\n        this.uiLerpValue = Math.min(value, 2);// 最大取到2倍\r\n    }\r\n\r\n    getThisFrameTime(currentTime: number): number {\r\n        return this.lastLogicRemainTime + currentTime - this.lastFrameUTC;\r\n    }\r\n\r\n    updateEntitiesByForEach(): void {\r\n        for (let i = 0; i < this.entitiesComponentsDirtyInThisCycle.length; i++) {\r\n            let entity = this.entitiesComponentsDirtyInThisCycle[i];\r\n            let oldBits = entity.oldBits;\r\n            let newBits = entity.componentsBits;\r\n\r\n            this.entitiesByForEach.forEach((set, bits) => {\r\n                let containOldBits = isContainSubBits(bits, oldBits);\r\n                let containNewBits = isContainSubBits(bits, newBits);\r\n\r\n                if (containOldBits && !containNewBits) {\r\n                    set.delete(entity);\r\n                } else if (!containNewBits && containNewBits) {\r\n                    set.add(entity);\r\n                }\r\n            });\r\n\r\n            entity.cancelDirty();\r\n        }\r\n\r\n        this.entitiesComponentsDirtyInThisCycle = [];\r\n    }\r\n\r\n    updateNewEntitiesByForEach() {\r\n        for (let i = 0; i < this.newEntitiesInThisCycle.length; i++) {\r\n            let entity = this.newEntitiesInThisCycle[i];\r\n            let newBits = entity.componentsBits;\r\n\r\n            this.entitiesByForEach.forEach((set, bits) => {\r\n                if (isContainSubBits(bits, newBits)) {\r\n                    set.add(entity);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.newEntitiesInThisCycle = [];\r\n    }\r\n\r\n    notifyEntityComponentsDirty(entity: Entity) {\r\n        this.entitiesComponentsDirtyInThisCycle.push(entity);\r\n    }\r\n\r\n    backupEntityComponents() {\r\n        for (let i = 0; i < this.allEntities.length; i++) {\r\n            let entity = this.allEntities[i];\r\n            entity.copyComponents();\r\n        }\r\n    }\r\n}"]}