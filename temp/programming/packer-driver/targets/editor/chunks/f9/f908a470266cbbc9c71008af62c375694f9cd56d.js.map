{"version":3,"sources":["file:///D:/File/Cocos/ECS_Demo/assets/src/ecs/framework/Entity.ts"],"names":["EEntity","convertComponentTypeIDToIndex","isContainSubBits","World","type","_oldBits","_componentsBits","componentsDirty","components","id","oldBits","componentsBits","addComponent","comp","getComponent","prototype","hasComponent","removeComponent","hasComponentBits","bits","getComponentsByIndexes","indexes","componentArr","forEach","idx","push","markCompoentDirty","instance","notfiyEntityComponentsDirty","cancelDirty"],"mappings":";;;sFAKaA,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAH6BC,MAAAA,6B,iBAAjCA,6B;AAAgEC,MAAAA,gB,iBAAAA,gB;;AAChEC,MAAAA,K,iBAAAA,K;;;;;;;yBAEIH,O,GAAN,MAAMA,OAAN,CAAc;AAAA;AAAA,eACjBI,IADiB;AAAA,eAGTC,QAHS,GAGU,CAHV;AAAA,eASTC,eATS,GASiB,CATjB;AAAA,eAejBC,eAfiB,GAeU,KAfV;AAAA,eAgBjBC,UAhBiB,GAgBU,EAhBV;AAAA,eAiBjBC,EAjBiB;AAAA;;AAKC,YAAPC,OAAO,GAAW;AACzB,iBAAO,KAAKL,QAAZ;AACH;;AAIwB,YAAdM,cAAc,GAAW;AAChC,iBAAO,KAAKL,eAAZ;AACH;;AAMDM,QAAAA,YAAY,CAAuBR,IAAvB,EAA6C;AACrD,cAAIS,IAAI,GAAG,IAAIT,IAAJ,EAAX;AACA,eAAKI,UAAL,CAAgB;AAAA;AAAA,8EAA8BK,IAAI,CAACT,IAAnC,CAAhB,IAA4DS,IAA5D;AACA,eAAKP,eAAL,IAAwBO,IAAI,CAACT,IAA7B;AACA,iBAAOS,IAAP;AACH;;AAEDC,QAAAA,YAAY,CAAuBV,IAAvB,EAAkD;AAC1D,iBAAO,KAAKI,UAAL,CAAgB;AAAA;AAAA,8EAA8BJ,IAAI,CAACW,SAAL,CAAeX,IAA7C,CAAhB,CAAP;AACH;;AAEDY,QAAAA,YAAY,CAAuBZ,IAAvB,EAAwD;AAChE,iBAAO,CAAC,KAAKO,cAAL,GAAsBP,IAAI,CAACW,SAAL,CAAeX,IAAtC,KAA+C,CAAtD;AACH;;AAEDa,QAAAA,eAAe,CAAuBb,IAAvB,EAA+C;AAC1D,eAAKI,UAAL,CAAgB;AAAA;AAAA,8EAA8BJ,IAAI,CAACW,SAAL,CAAeX,IAA7C,CAAhB,IAAsE,IAAtE;AACA,eAAKE,eAAL,IAAwBF,IAAI,CAACW,SAAL,CAAeX,IAAvC;AACH;;AAEDc,QAAAA,gBAAgB,CAACC,IAAD,EAAe;AAC3B,iBAAO;AAAA;AAAA,oDAAiBA,IAAjB,EAAuB,KAAKb,eAA5B,CAAP;AACH;;AAEDc,QAAAA,sBAAsB,CAACC,OAAD,EAAkC;AACpD,cAAIC,YAA0B,GAAG,EAAjC;AAEAD,UAAAA,OAAO,CAACE,OAAR,CAAgBC,GAAG,IAAI;AACnBF,YAAAA,YAAY,CAACG,IAAb,CAAkB,KAAKjB,UAAL,CAAgBgB,GAAhB,CAAlB;AACH,WAFD;AAIA,iBAAOF,YAAP;AACH;;AAEDI,QAAAA,iBAAiB,CAAChB,OAAD,EAAkB;AAC/B,cAAI,CAAC,KAAKH,eAAV,EAA2B;AACvB,iBAAKF,QAAL,GAAgBK,OAAhB;AACA;AAAA;AAAA,gCAAMiB,QAAN,CAAeC,2BAAf,CAA2C,IAA3C;AACH;AACJ;;AAEDC,QAAAA,WAAW,GAAG;AACV,eAAKtB,eAAL,GAAuB,KAAvB;AACH;;AA9DgB,O","sourcesContent":["import { EComponent } from \"./Component\";\r\nimport { EntityType } from \"./Config\";\r\nimport { convertComponentTypeIDToIndex as convertComponentTypeIDToIndex, isContainSubBits } from \"./Tool\";\r\nimport { World } from \"./World\";\r\n\r\nexport class EEntity {\r\n    type: EntityType;\r\n\r\n    private _oldBits: number = 0;\r\n\r\n    public get oldBits(): number {\r\n        return this._oldBits;\r\n    }\r\n\r\n    private _componentsBits: number = 0;\r\n\r\n    public get componentsBits(): number {\r\n        return this._componentsBits;\r\n    }\r\n\r\n    componentsDirty: boolean = false;\r\n    components: EComponent[] = [];\r\n    id: number;\r\n\r\n    addComponent<T extends EComponent>(type: new () => T): T {\r\n        let comp = new type();\r\n        this.components[convertComponentTypeIDToIndex(comp.type)] = comp;\r\n        this._componentsBits |= comp.type;\r\n        return comp;\r\n    }\r\n\r\n    getComponent<T extends EComponent>(type: { prototype: T }): T {\r\n        return this.components[convertComponentTypeIDToIndex(type.prototype.type)] as T;\r\n    }\r\n\r\n    hasComponent<T extends EComponent>(type: { prototype: T }): boolean {\r\n        return (this.componentsBits & type.prototype.type) != 0;\r\n    }\r\n\r\n    removeComponent<T extends EComponent>(type: { prototype: T }) {\r\n        this.components[convertComponentTypeIDToIndex(type.prototype.type)] = null;\r\n        this._componentsBits ^= type.prototype.type;\r\n    }\r\n\r\n    hasComponentBits(bits: number) {\r\n        return isContainSubBits(bits, this._componentsBits);\r\n    }\r\n\r\n    getComponentsByIndexes(indexes: number[]): EComponent[] {\r\n        let componentArr: EComponent[] = [];\r\n\r\n        indexes.forEach(idx => {\r\n            componentArr.push(this.components[idx]);\r\n        });\r\n\r\n        return componentArr;\r\n    }\r\n\r\n    markCompoentDirty(oldBits: number) {\r\n        if (!this.componentsDirty) {\r\n            this._oldBits = oldBits;\r\n            World.instance.notfiyEntityComponentsDirty(this);\r\n        }\r\n    }\r\n\r\n    cancelDirty() {\r\n        this.componentsDirty = false;\r\n    }\r\n}"]}