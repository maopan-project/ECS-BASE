{"version":3,"sources":["file:///F:/ACode/CocosCode/ECS_Demo/assets/src/ecs/framework/World.ts"],"names":["World","GameService","NetworkReceiveComponent","EntityType","SystemType","WorldCycleType","convertComponentTypeIDToIndex","getComponentsProtoBits","isContainSubBits","Entity","constructor","allEntities","entitiesByForEach","Map","entitiesComponentsDirtyInThisCycle","useEntityID","singletonEntity","entitiesDestroyForeachInThisCycle","entitiesDestroyInThisCycle","netWorkLogicFn","cycleType","Network","newEntitiesInThisCycle","systemInCycle","lastLogicRemainTime","lastFrameUTC","networkUpdateInterval","fixedUpdateInterval","frameDt","logicCycleCount","cycleCount","worldInCycle","uiLerpValue","instance","_ins","forEach","types","fn","bits","has","onRegisterNewForEach","indexes","type","push","prototype","entities","get","e","getComponentsByIndexes","Set","i","length","entity","hasComponentBits","add","set","addEntityToWorld","id","copyComponents","getEntityByID","entityID","getNewEntity","entityType","getSingletonEntity","Singleton","getSingletonEntityComponent","hasComponent","addComponent","getComponent","getEntitiesByComponents","addSystemToCycle","system","world","startCycle","Date","now","logicCycleThisCycle","startTime","cycle","RealTime","cycleWithRealTime","cycleWithNetwork","currentUTC","frameTotalTime","getThisFrameTime","logicUpdateCount","Math","floor","LogicBeforePhysics","systems","j","onUpdate","updateEntitiesByForEach","Render","k","End","updateNewEntitiesByForEach","removeDestroyedEntityByForeach","backupEntityComponents","lastFrameTime","updateUILerpValue","removeDestroyedEntities","value","min","currentTime","oldBits","newBits","componentsBits","containOldBits","containNewBits","delete","cancelDirty","notifyEntityComponentsDirty","notifyEntityDestroyed","systemBits"],"mappings":"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","sourcesContent":["import GameService from \"../GameService\";\r\nimport NetworkReceiveComponent from \"../components/NetworkComponent\";\r\nimport { Component } from \"./Component\";\r\nimport { EntityType, SystemType, WorldCycleType } from \"./ECSConfig\";\r\nimport { convertComponentTypeIDToIndex, getComponentsProtoBits, isContainSubBits } from \"./ECSTool\";\r\nimport Entity from \"./Entity\";\r\nimport System from \"./System\";\r\n\r\nexport default class World {\r\n    private constructor() { }\r\n    private static _ins: World = null;\r\n    public static get instance() {\r\n        if (!World._ins) {\r\n            World._ins = new World();\r\n        }\r\n\r\n        return World._ins;\r\n    }\r\n\r\n    private allEntities: Entity[] = [];\r\n    private entitiesByForEach: Map<number, Set<Entity>> = new Map();\r\n    private entitiesComponentsDirtyInThisCycle: Entity[] = [];\r\n    private useEntityID = 0;\r\n    private singletonEntity: Entity = null;\r\n    private entitiesDestroyForeachInThisCycle: Entity[] = [];\r\n    private entitiesDestroyInThisCycle: Entity[] = [];\r\n    private netWorkLogicFn: () => number;\r\n\r\n    cycleType: WorldCycleType = WorldCycleType.Network;\r\n    newEntitiesInThisCycle: Entity[] = [];\r\n    systemInCycle: System[][] = [];\r\n    lastLogicRemainTime: number = 0;\r\n    lastFrameUTC: number = 0;\r\n    networkUpdateInterval: number = 0;\r\n    fixedUpdateInterval: number = 0;\r\n    frameDt: number = 0;\r\n    logicCycleCount: number = 0;\r\n    cycleCount: number = 0;\r\n    worldInCycle: boolean = false;\r\n    uiLerpValue: number = 0;\r\n\r\n    forEach(types: { prototype: Component }[], fn: (entity: Entity, ...components: Component[]) => void) {\r\n        let bits = getComponentsProtoBits(types);\r\n\r\n        if (!this.entitiesByForEach.has(bits)) {\r\n            this.onRegisterNewForEach(bits);\r\n        }\r\n\r\n        let indexes: number[] = [];\r\n        types.forEach(type => {\r\n            indexes.push(convertComponentTypeIDToIndex(type.prototype.type));\r\n        });\r\n\r\n        let entities = this.entitiesByForEach.get(bits);\r\n        entities.forEach(e => {\r\n            fn(e, ...e.getComponentsByIndexes(indexes));\r\n        });\r\n    }\r\n\r\n    private onRegisterNewForEach(bits: number) {\r\n        let entities = new Set<Entity>();\r\n\r\n        for (let i = 0; i < this.allEntities.length; i++) {\r\n            const entity = this.allEntities[i];\r\n            if (entity && entity.hasComponentBits(bits)) {\r\n                entities.add(entity);\r\n            }\r\n        }\r\n\r\n        this.entitiesByForEach.set(bits, entities);\r\n\r\n        return entities;\r\n    }\r\n\r\n    addEntityToWorld(entity: Entity): void {\r\n        this.useEntityID++;\r\n        entity.id = this.useEntityID;\r\n        entity.copyComponents();\r\n        this.allEntities.push(entity);\r\n        this.newEntitiesInThisCycle.push(entity);\r\n    }\r\n\r\n    getEntityByID(entityID: number) {\r\n        return this.allEntities[entityID - 1];\r\n    }\r\n\r\n    getNewEntity(entityType: EntityType): Entity {\r\n        let entity = new Entity();\r\n        entity.type = entityType;\r\n        return entity;\r\n    }\r\n\r\n    getSingletonEntity() {\r\n        if (!this.singletonEntity) {\r\n            this.singletonEntity = this.getNewEntity(EntityType.Singleton);\r\n            this.addEntityToWorld(this.singletonEntity);\r\n        }\r\n\r\n        return this, this.singletonEntity;\r\n    }\r\n\r\n    getSingletonEntityComponent<T extends Component>(type: { prototype: T, new(): T }): T {\r\n        let entity = this.getSingletonEntity();\r\n\r\n        if (!entity.hasComponent<T>(type)) {\r\n            entity.addComponent(type);\r\n        }\r\n\r\n        return entity.getComponent<T>(type);\r\n    }\r\n\r\n    getEntitiesByComponents(types: { prototype: Component }[]): Set<Entity> {\r\n        let bits = getComponentsProtoBits(types);\r\n        let entities = this.entitiesByForEach.get(bits);\r\n        if (!entities) {\r\n            entities = this.onRegisterNewForEach(bits);\r\n        }\r\n\r\n        return entities;\r\n    }\r\n\r\n    addSystemToCycle(system: System): void {\r\n        system.world = this;\r\n\r\n        if (!this.systemInCycle[system.type]) {\r\n            this.systemInCycle[system.type] = [];\r\n        }\r\n\r\n        this.systemInCycle[system.type].push(system);\r\n    }\r\n\r\n    startCycle() {\r\n        this.lastFrameUTC = Date.now();\r\n        this.worldInCycle = true;\r\n        this.cycleCount = 0;\r\n        this.logicCycleCount = 0;\r\n        this.networkUpdateInterval = 1000 / 15;\r\n        this.fixedUpdateInterval = 1000 / 30;\r\n        this.cycleType = WorldCycleType.Network;\r\n        this.netWorkLogicFn = GameService.logicCycleThisCycle;\r\n        this.getSingletonEntityComponent(NetworkReceiveComponent).startTime = Date.now();\r\n    }\r\n\r\n    cycle(): void {\r\n        if (this.cycleType == WorldCycleType.RealTime) {\r\n            this.cycleWithRealTime();\r\n        } else if (this.cycleType == WorldCycleType.Network) {\r\n            this.cycleWithNetwork();\r\n        }\r\n    }\r\n\r\n    cycleWithRealTime(): void {\r\n        let currentUTC = Date.now();\r\n        let frameTotalTime = this.getThisFrameTime(currentUTC);\r\n        let logicUpdateCount = Math.floor(frameTotalTime / this.fixedUpdateInterval);\r\n        this.frameDt = currentUTC - this.lastFrameUTC;\r\n        this.lastFrameUTC = currentUTC;\r\n        this.lastLogicRemainTime = frameTotalTime - (logicUpdateCount * this.fixedUpdateInterval);\r\n\r\n        for (let i = SystemType.Network; i < SystemType.LogicBeforePhysics; i++) {\r\n            let systems = this.systemInCycle[i];\r\n\r\n            if (!systems) {\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < systems.length; j++) {\r\n                let system = systems[j];\r\n                system.onUpdate();\r\n                this.updateEntitiesByForEach();\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < logicUpdateCount; i++) {\r\n            for (let j = SystemType.LogicBeforePhysics; j < SystemType.Render; j++) {\r\n                let systems = this.systemInCycle[j];\r\n\r\n                if (!systems) {\r\n                    continue;\r\n                }\r\n\r\n                for (let k = 0; k < systems.length; k++) {\r\n                    let system = systems[k];\r\n                    system.onUpdate();\r\n                    this.updateEntitiesByForEach();\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = SystemType.Render; i < SystemType.End; i++) {\r\n            let systems = this.systemInCycle[i];\r\n\r\n            if (!systems) {\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < systems.length; j++) {\r\n                let system = systems[j];\r\n                system.onUpdate();\r\n                this.updateEntitiesByForEach();\r\n            }\r\n        }\r\n\r\n        this.updateNewEntitiesByForEach();\r\n\r\n        this.logicCycleCount += logicUpdateCount;\r\n        this.cycleCount++;\r\n    }\r\n\r\n    cycleWithNetwork(): void {\r\n        let currentUTC = Date.now();\r\n        let frameTotalTime = this.getThisFrameTime(currentUTC);\r\n        let logicUpdateCount = this.netWorkLogicFn();\r\n        this.frameDt = currentUTC - this.lastFrameUTC;\r\n        this.lastFrameUTC = currentUTC;\r\n        this.lastLogicRemainTime = frameTotalTime - (logicUpdateCount * this.fixedUpdateInterval);\r\n\r\n        for (let i = SystemType.Network; i < SystemType.LogicBeforePhysics; i++) {\r\n            let systems = this.systemInCycle[i];\r\n\r\n            if (!systems) {\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < systems.length; j++) {\r\n                let system = systems[j];\r\n                system.onUpdate();\r\n                this.updateEntitiesByForEach();\r\n                this.removeDestroyedEntityByForeach();\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < logicUpdateCount; i++) {\r\n            this.logicCycleCount++;\r\n            this.backupEntityComponents();\r\n\r\n            for (let j = SystemType.LogicBeforePhysics; j < SystemType.Render; j++) {\r\n                let systems = this.systemInCycle[j];\r\n\r\n                if (!systems) {\r\n                    continue;\r\n                }\r\n\r\n                for (let k = 0; k < systems.length; k++) {\r\n                    let system = systems[k];\r\n                    system.onUpdate();\r\n                    this.updateEntitiesByForEach();\r\n                    this.removeDestroyedEntityByForeach();\r\n                }\r\n            }\r\n        }\r\n\r\n        let lastFrameTime = this.getSingletonEntityComponent(NetworkReceiveComponent).startTime\r\n            + (this.logicCycleCount - 1) * this.fixedUpdateInterval;\r\n        this.updateUILerpValue(lastFrameTime);\r\n\r\n        if (this.logicCycleCount >= 1) {\r\n            for (let i = SystemType.Render; i < SystemType.End; i++) {\r\n                let systems = this.systemInCycle[i];\r\n\r\n                if (!systems) {\r\n                    continue;\r\n                }\r\n\r\n                for (let j = 0; j < systems.length; j++) {\r\n                    let system = systems[j];\r\n                    system.onUpdate();\r\n                    this.updateEntitiesByForEach();\r\n                    this.removeDestroyedEntityByForeach();\r\n                }\r\n            }\r\n\r\n            this.updateNewEntitiesByForEach();\r\n        }\r\n\r\n        this.removeDestroyedEntities();\r\n        this.cycleCount++;\r\n    }\r\n\r\n    updateUILerpValue(lastFrameTime: number) {\r\n        let value = (Date.now() - lastFrameTime) / this.fixedUpdateInterval;\r\n        this.uiLerpValue = Math.min(value, 2);// 最大取到2倍\r\n    }\r\n\r\n    getThisFrameTime(currentTime: number): number {\r\n        return this.lastLogicRemainTime + currentTime - this.lastFrameUTC;\r\n    }\r\n\r\n    updateEntitiesByForEach(): void {\r\n        for (let i = 0; i < this.entitiesComponentsDirtyInThisCycle.length; i++) {\r\n            let entity = this.entitiesComponentsDirtyInThisCycle[i];\r\n            let oldBits = entity.oldBits;\r\n            let newBits = entity.componentsBits;\r\n\r\n            this.entitiesByForEach.forEach((set, bits) => {\r\n                let containOldBits = isContainSubBits(bits, oldBits);\r\n                let containNewBits = isContainSubBits(bits, newBits);\r\n\r\n                if (containOldBits && !containNewBits) {\r\n                    set.delete(entity);\r\n                } else if (!containNewBits && containNewBits) {\r\n                    set.add(entity);\r\n                }\r\n            });\r\n\r\n            entity.cancelDirty();\r\n        }\r\n\r\n        this.entitiesComponentsDirtyInThisCycle = [];\r\n    }\r\n\r\n    updateNewEntitiesByForEach() {\r\n        for (let i = 0; i < this.newEntitiesInThisCycle.length; i++) {\r\n            let entity = this.newEntitiesInThisCycle[i];\r\n            let newBits = entity.componentsBits;\r\n\r\n            this.entitiesByForEach.forEach((set, bits) => {\r\n                if (isContainSubBits(bits, newBits)) {\r\n                    set.add(entity);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.newEntitiesInThisCycle = [];\r\n    }\r\n\r\n    notifyEntityComponentsDirty(entity: Entity) {\r\n        this.entitiesComponentsDirtyInThisCycle.push(entity);\r\n    }\r\n\r\n    backupEntityComponents() {\r\n        for (let i = 0; i < this.allEntities.length; i++) {\r\n            let entity = this.allEntities[i];\r\n            entity?.copyComponents();\r\n        }\r\n    }\r\n\r\n    notifyEntityDestroyed(entity: Entity) {\r\n        this.entitiesDestroyForeachInThisCycle.push(entity);\r\n    }\r\n\r\n    removeDestroyedEntityByForeach() {\r\n        for (let i = 0; i < this.entitiesDestroyForeachInThisCycle.length; i++) {\r\n            let entity = this.entitiesDestroyForeachInThisCycle[i];\r\n            let oldBits = entity.oldBits;\r\n            let newBits = entity.componentsBits;\r\n\r\n            this.entitiesByForEach.forEach((set, systemBits) => {\r\n                let containOldBits = isContainSubBits(systemBits, oldBits);\r\n                let containNewBits = isContainSubBits(systemBits, newBits);\r\n\r\n                if (containOldBits || containNewBits) {\r\n                    set.delete(entity);\r\n                }\r\n            });\r\n\r\n            this.entitiesDestroyInThisCycle.push(entity);\r\n        }\r\n\r\n        this.entitiesDestroyForeachInThisCycle.length = 0;\r\n    }\r\n\r\n    removeDestroyedEntities() {\r\n        for (let i = 0; i < this.entitiesDestroyInThisCycle.length; i++) {\r\n            let entity = this.entitiesDestroyInThisCycle[i];\r\n            this.allEntities[entity.id - 1] = null;// 这里有问题，列表会越来越大（后续需要用环形列表处理）\r\n        }\r\n\r\n        this.entitiesDestroyInThisCycle.length = 0;\r\n    }\r\n}"]}