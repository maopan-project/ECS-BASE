{"version":3,"sources":["file:///D:/File/Cocos/ECS_Demo/assets/src/ecs/GameService.ts"],"names":["GameService","MoveComponent","NetworkReceiveComponent","TransformComponent","ComponentType","World","MoveSystem","NetworkReceiveSystem","initWorld","prototype","type","TransformComp","NetworkReceive","world","instance","fixedUpdateInterval","addSystemToCycle","logicCycleThisCycle","nrc","getSingletonEntityComponent","n2l","networkUpdateInterval","maxLogicNet","Math","ceil","msgToDeal","length","timePass","Date","now","startTime","maxLogicTime","floor","logicThisCycle","min","logicCycleCount"],"mappings":";;;mMASqBA,W;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AARdC,MAAAA,a;;AACAC,MAAAA,uB;;AACEC,MAAAA,kB,iBAAAA,kB;;AACAC,MAAAA,a,iBAAAA,a;;AACAC,MAAAA,K,iBAAAA,K;;AACAC,MAAAA,U,iBAAAA,U;;AACFC,MAAAA,oB;;;;;;;;;yBAEcP,W,GAAN,MAAMA,WAAN,CAAkB;AAEb,eAATQ,SAAS,GAAS;AACrB;AAAA;AAAA,wDAAmBC,SAAnB,CAA6BC,IAA7B,GAAoC;AAAA;AAAA,8CAAcC,aAAlD;AACA;AAAA;AAAA,kEAAwBF,SAAxB,CAAkCC,IAAlC,GAAyC;AAAA;AAAA,8CAAcE,cAAvD;AACA;AAAA;AAAA,8CAAcH,SAAd,CAAwBC,IAAxB,GAA+B;AAAA;AAAA,8CAAcT,aAA7C;AAEA,cAAIY,KAAK,GAAG;AAAA;AAAA,8BAAMC,QAAlB;AACAD,UAAAA,KAAK,CAACE,mBAAN,GAA4B,IAAI,EAAJ,GAAS,IAArC;AACAF,UAAAA,KAAK,CAACG,gBAAN,CAAuB;AAAA;AAAA,yCAAvB;AACAH,UAAAA,KAAK,CAACG,gBAAN,CAAuB;AAAA;AAAA,6DAAvB;AACH;;AAEyB,eAAnBC,mBAAmB,GAAG;AACzB,cAAIJ,KAAK,GAAG;AAAA;AAAA,8BAAMC,QAAlB;AAEA,cAAII,GAAG,GAAGL,KAAK,CAACM,2BAAN;AAAA;AAAA,iEAAV,CAHyB,CAIzB;;AACA,cAAIC,GAAG,GAAGP,KAAK,CAACQ,qBAAN,GAA8BR,KAAK,CAACE,mBAA9C,CALyB,CAMzB;;AACA,cAAIO,WAAW,GAAGC,IAAI,CAACC,IAAL,CAAUN,GAAG,CAACO,SAAJ,CAAcC,MAAd,GAAuBN,GAAjC,CAAlB,CAPyB,CASzB;;AACA,cAAIO,QAAQ,GAAGC,IAAI,CAACC,GAAL,KAAaX,GAAG,CAACY,SAAhC,CAVyB,CAWzB;;AACA,cAAIC,YAAY,GAAGR,IAAI,CAACS,KAAL,CAAWL,QAAQ,GAAGd,KAAK,CAACE,mBAA5B,IAAmD,CAAtE;AAEA,cAAIkB,cAAc,GAAGV,IAAI,CAACW,GAAL,CAASZ,WAAT,EAAsBS,YAAtB,IAAsClB,KAAK,CAACsB,eAAjE,CAdyB,CAgBzB;;AACA,iBAAOF,cAAP;AACH;;AA/B4B,O","sourcesContent":["import { log } from \"cc\";\r\nimport MoveComponent from \"./components/MoveCompoent\";\r\nimport NetworkReceiveComponent from \"./components/NetworkComponent\";\r\nimport { TransformComponent } from \"./components/TransformComponent\";\r\nimport { ComponentType, EntityType } from \"./framework/ECSConfig\";\r\nimport { World } from \"./framework/World\";\r\nimport { MoveSystem } from \"./systems/MoveSystem\";\r\nimport NetworkReceiveSystem from \"./systems/NetwrokReciveSystem\";\r\n\r\nexport default class GameService {\r\n\r\n    static initWorld(): void {\r\n        TransformComponent.prototype.type = ComponentType.TransformComp;\r\n        NetworkReceiveComponent.prototype.type = ComponentType.NetworkReceive;\r\n        MoveComponent.prototype.type = ComponentType.MoveComponent;\r\n\r\n        let world = World.instance;\r\n        world.fixedUpdateInterval = 1 / 60 * 1000;\r\n        world.addSystemToCycle(new MoveSystem());\r\n        world.addSystemToCycle(new NetworkReceiveSystem());\r\n    }\r\n\r\n    static logicCycleThisCycle() {\r\n        let world = World.instance;\r\n\r\n        let nrc = world.getSingletonEntityComponent(NetworkReceiveComponent);\r\n        // 一个网络帧可以执行多少个逻辑帧\r\n        let n2l = world.networkUpdateInterval / world.fixedUpdateInterval;\r\n        // 当前网络帧最大支持的逻辑帧数\r\n        let maxLogicNet = Math.ceil(nrc.msgToDeal.length * n2l);\r\n\r\n        // 流失的时间\r\n        let timePass = Date.now() - nrc.startTime;\r\n        // 当前流失时间支持的最大逻辑帧次数\r\n        let maxLogicTime = Math.floor(timePass / world.fixedUpdateInterval) + 1;\r\n\r\n        let logicThisCycle = Math.min(maxLogicNet, maxLogicTime) - world.logicCycleCount;\r\n\r\n        // log('可以执行的逻辑帧是-', logicThisCycle, '最大的时间值-', maxLogicTime, '最大的网络值-', maxLogicNet);\r\n        return logicThisCycle;\r\n    }\r\n}"]}