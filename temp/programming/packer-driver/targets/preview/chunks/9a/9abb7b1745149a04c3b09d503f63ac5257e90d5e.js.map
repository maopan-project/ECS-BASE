{"version":3,"sources":["file:///D:/File/Cocos/ECS_Demo/assets/src/ecs/framework/ECSTool.ts"],"names":["isContainSubBits","subBits","allBits","getComponentsProtoBits","types","bits","forEach","type","prototype","convertComponentTypeIDToIndex","typeID","index","deepClone","obj","result","Object","create","key","val"],"mappings":";;;;;AAEO,WAASA,gBAAT,CAA0BC,OAA1B,EAA2CC,OAA3C,EAAqE;AACxE,WAAOD,OAAO,KAAKA,OAAO,GAAGC,OAAf,CAAd;AACH;;AAEM,WAASC,sBAAT,CAAgCC,KAAhC,EAA2E;AAC9E,QAAIC,IAAI,GAAG,CAAX;AACAD,IAAAA,KAAK,CAACE,OAAN,CAAcC,IAAI,IAAI;AAClBF,MAAAA,IAAI,IAAIE,IAAI,CAACC,SAAL,CAAeD,IAAvB;AACH,KAFD;AAIA,WAAOF,IAAP;AACH;;AAEM,WAASI,6BAAT,CAAuCC,MAAvC,EAA+D;AAClE,QAAIC,KAAK,GAAG,CAAZ;;AAEA,QAAI,CAACD,MAAM,GAAG,MAAV,KAAqB,CAAzB,EAA4B;AACxBA,MAAAA,MAAM,KAAK,EAAX;AACAC,MAAAA,KAAK,IAAI,EAAT;AACH;;AAED,QAAI,CAACD,MAAM,GAAG,IAAV,KAAmB,CAAvB,EAA0B;AACtBA,MAAAA,MAAM,KAAK,CAAX;AACAC,MAAAA,KAAK,IAAI,CAAT;AACH;;AAED,QAAI,CAACD,MAAM,GAAG,GAAV,KAAkB,CAAtB,EAAyB;AACrBA,MAAAA,MAAM,KAAK,CAAX;AACAC,MAAAA,KAAK,IAAI,CAAT;AACH;;AAED,QAAI,CAACD,MAAM,GAAG,GAAV,KAAkB,CAAtB,EAAyB;AACrBA,MAAAA,MAAM,KAAK,CAAX;AACAC,MAAAA,KAAK,IAAI,CAAT;AACH;;AAED,QAAI,CAACD,MAAM,GAAG,GAAV,KAAkB,CAAtB,EAAyB;AACrBC,MAAAA,KAAK,IAAI,CAAT;AACH;;AAED,WAAOA,KAAP;AACH;;AAEM,WAASC,SAAT,CAAmBC,GAAnB,EAAgCC,MAAhC,EAAiD;AACpD,QAAI,CAACA,MAAL,EAAa;AACTA,MAAAA,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAT;AACH;;AAED,QAAIH,GAAG,IAAI,OAAOA,GAAP,KAAe,QAA1B,EAAoC;AAChC,WAAK,IAAMI,GAAX,IAAkBJ,GAAlB,EAAuB;AACnB,YAAIK,GAAG,GAAGL,GAAG,CAACI,GAAD,CAAb;;AAEA,YAAIC,GAAG,IAAI,OAAOA,GAAP,KAAe,QAA1B,EAAoC;AAChCJ,UAAAA,MAAM,CAACG,GAAD,CAAN,GAAcL,SAAS,CAACM,GAAD,CAAvB;AACH,SAFD,MAEO;AACHJ,UAAAA,MAAM,CAACG,GAAD,CAAN,GAAcC,GAAd;AACH;AACJ;;AAED,aAAOJ,MAAP;AACH;;AAED,WAAOD,GAAP;AACH;;;;;;;sBA/Deb,gB;4BAIAG,sB;mCASAM,6B;eA8BAG","sourcesContent":["import { Component } from \"./Component\";\r\n\r\nexport function isContainSubBits(subBits: number, allBits: number): boolean {\r\n    return subBits == (subBits & allBits);\r\n}\r\n\r\nexport function getComponentsProtoBits(types: { prototype: Component }[]): number {\r\n    let bits = 0;\r\n    types.forEach(type => {\r\n        bits |= type.prototype.type;\r\n    });\r\n\r\n    return bits;\r\n}\r\n\r\nexport function convertComponentTypeIDToIndex(typeID: number): number {\r\n    let index = 0;\r\n\r\n    if ((typeID & 0xFFFF) == 0) {\r\n        typeID >>= 16;\r\n        index += 16;\r\n    }\r\n\r\n    if ((typeID & 0xFF) == 0) {\r\n        typeID >>= 8;\r\n        index += 8;\r\n    }\r\n\r\n    if ((typeID & 0xF) == 0) {\r\n        typeID >>= 4;\r\n        index += 4;\r\n    }\r\n\r\n    if ((typeID & 0x3) == 0) {\r\n        typeID >>= 2;\r\n        index += 2;\r\n    }\r\n\r\n    if ((typeID & 0x1) == 0) {\r\n        index += 1;\r\n    }\r\n\r\n    return index;\r\n}\r\n\r\nexport function deepClone(obj: object, result?: object) {\r\n    if (!result) {\r\n        result = Object.create(null);\r\n    }\r\n\r\n    if (obj && typeof obj === 'object') {\r\n        for (const key in obj) {\r\n            let val = obj[key];\r\n\r\n            if (val && typeof val === 'object') {\r\n                result[key] = deepClone(val);\r\n            } else {\r\n                result[key] = val;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    return obj;\r\n}"]}