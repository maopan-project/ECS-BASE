{"version":3,"sources":["file:///F:/ACode/CocosCode/ECS_Demo/assets/src/ui/GameActor.ts"],"names":["_decorator","Sprite","SpriteFrame","v3","Vec3","FireComponent","MoveComponent","TransformComponent","World","GameActorMachine","GameActorFire","GameActorIdle","GameActorWalk","StateType","GameUIBase","ccclass","property","GameActor","animIdleTime","animWalkTime","moveComp","transformComp","backupTransformComp","fireComp","machine","tempVec3","tempBackupVec3","outVec3","start","entity","getComponent","getBackupComponent","changeState","update","deltaTime","isMove","checkIsMove","isFire","checkIsFire","state","type","FIRE","WALK","IDLE","pos","position","set","x","y","z","lerp","instance","uiLerpValue","node","equal"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,E,OAAAA,E;AAAIC,MAAAA,I,OAAAA,I;;AACvCC,MAAAA,a;;AACAC,MAAAA,a;;AACAC,MAAAA,kB;;AACAC,MAAAA,K;;AACAC,MAAAA,gB;;AACEC,MAAAA,a,iBAAAA,a;AAAeC,MAAAA,a,iBAAAA,a;AAAeC,MAAAA,a,iBAAAA,a;AAAeC,MAAAA,S,iBAAAA,S;;AAC/CC,MAAAA,U;;;;;;;;;OACD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBhB,U;;2BAGjBiB,S,WAERD,QAAQ,CAACf,MAAD,C,UAGRe,QAAQ,CAAC,CAACd,WAAD,CAAD,C,UAGRc,QAAQ,CAAC,CAACd,WAAD,CAAD,C,UAGRc,QAAQ,CAAC,CAACd,WAAD,CAAD,C,EAZZa,O,qBAAD,MACaE,SADb;AAAA;AAAA,oCAC0C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eActCC,YAdsC,GAcf,CAde;AAAA,eAgBtCC,YAhBsC,GAgBf,CAhBe;AAAA,eAkBtCC,QAlBsC,GAkBZ,IAlBY;AAAA,eAoBtCC,aApBsC,GAoBF,IApBE;AAAA,eAsBtCC,mBAtBsC,GAsBI,IAtBJ;AAAA,eAwBtCC,QAxBsC,GAwBZ,IAxBY;AAAA,eA0BtCC,OA1BsC,GA0BV,IA1BU;AAAA,eAwC9BC,QAxC8B,GAwCnBtB,EAAE,EAxCiB;AAAA,eA0C9BuB,cA1C8B,GA0CbvB,EAAE,EA1CW;AAAA,eA4C9BwB,OA5C8B,GA4CpBxB,EAAE,EA5CkB;AAAA;;AA4BtCyB,QAAAA,KAAK,GAAG;AACJ,eAAKP,aAAL,GAAqB,KAAKQ,MAAL,CAAYC,YAAZ;AAAA;AAAA,uDAArB;AACA,eAAKV,QAAL,GAAgB,KAAKS,MAAL,CAAYC,YAAZ;AAAA;AAAA,6CAAhB;AACA,eAAKR,mBAAL,GAA2B,KAAKO,MAAL,CAAYE,kBAAZ;AAAA;AAAA,uDAA3B;AACA,eAAKR,QAAL,GAAgB,KAAKM,MAAL,CAAYC,YAAZ;AAAA;AAAA,6CAAhB;AAEA,eAAKN,OAAL,GAAe;AAAA;AAAA,oDAAqB,IAArB,CAAf;AAEA,eAAKA,OAAL,CAAaQ,WAAb,CAAyB;AAAA;AAAA,+CAAzB;AACH;;AASDC,QAAAA,MAAM,CAACC,SAAD,EAAoB;AACtB,cAAIC,MAAM,GAAG,KAAKC,WAAL,EAAb;AACA,cAAIC,MAAM,GAAG,KAAKC,WAAL,EAAb;;AACA,cAAID,MAAM,IAAI,KAAKb,OAAL,CAAae,KAAb,CAAmBC,IAAnB,KAA4B;AAAA;AAAA,sCAAUC,IAApD,EAA0D;AACtD,iBAAKjB,OAAL,CAAaQ,WAAb,CAAyB;AAAA;AAAA,iDAAzB;AACH,WAFD,MAEO,IAAI,CAACK,MAAD,IAAWF,MAAX,IAAqB,KAAKX,OAAL,CAAae,KAAb,CAAmBC,IAAnB,IAA2B;AAAA;AAAA,sCAAUE,IAA9D,EAAoE;AACvE,iBAAKlB,OAAL,CAAaQ,WAAb,CAAyB;AAAA;AAAA,iDAAzB;AACH,WAFM,MAEA,IAAI,CAACK,MAAD,IAAW,CAACF,MAAZ,IAAsB,KAAKX,OAAL,CAAae,KAAb,CAAmBC,IAAnB,IAA2B;AAAA;AAAA,sCAAUG,IAA/D,EAAqE;AACxE,iBAAKnB,OAAL,CAAaQ,WAAb,CAAyB;AAAA;AAAA,iDAAzB;AACH;;AAGD,cAAIY,GAAG,GAAG,KAAKvB,aAAL,CAAmBwB,QAA7B;AACA,eAAKpB,QAAL,CAAcqB,GAAd,CAAkBF,GAAG,CAACG,CAAtB,EAAyBH,GAAG,CAACI,CAA7B,EAAgCJ,GAAG,CAACK,CAApC;AACAL,UAAAA,GAAG,GAAG,KAAKtB,mBAAL,CAAyBuB,QAA/B;AACA,eAAKnB,cAAL,CAAoBoB,GAApB,CAAwBF,GAAG,CAACG,CAA5B,EAA+BH,GAAG,CAACI,CAAnC,EAAsCJ,GAAG,CAACK,CAA1C;AACA7C,UAAAA,IAAI,CAAC8C,IAAL,CAAU,KAAKvB,OAAf,EAAwB,KAAKD,cAA7B,EAA6C,KAAKD,QAAlD,EAA4D;AAAA;AAAA,8BAAM0B,QAAN,CAAeC,WAA3E;AAEA,eAAKC,IAAL,CAAUR,QAAV,GAAqB,KAAKlB,OAA1B;AAEA,eAAKH,OAAL,CAAaS,MAAb,CAAoBC,SAApB;AACH;;AAEDE,QAAAA,WAAW,GAAG;AACV,iBAAO,CAAC,KAAKf,aAAL,CAAmBwB,QAAnB,CAA4BS,KAA5B,CAAkC,KAAKhC,mBAAL,CAAyBuB,QAA3D,CAAR;AACH;;AAEDP,QAAAA,WAAW,GAAG;AACV,iBAAO,KAAKf,QAAL,CAAcc,MAArB;AACH;;AA3EqC,O;;;;;iBAGhB,I;;;;;;;iBAGE,E;;;;;;;iBAGA,E;;;;;;;iBAGA,E","sourcesContent":["import { _decorator, Sprite, SpriteFrame, v3, Vec3 } from 'cc';\r\nimport FireComponent from '../ecs/components/FireComponent';\r\nimport MoveComponent from '../ecs/components/MoveComponent';\r\nimport TransformComponent from '../ecs/components/TransformComponent';\r\nimport World from '../ecs/framework/World';\r\nimport GameActorMachine from '../state-machine/GameActorMachine';\r\nimport { GameActorFire, GameActorIdle, GameActorWalk, StateType } from '../state-machine/GameActorState';\r\nimport GameUIBase from '../ui/GameUIBase';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass\r\nexport class GameActor extends GameUIBase {\r\n\r\n    @property(Sprite)\r\n    spriteActor: Sprite = null;\r\n\r\n    @property([SpriteFrame])\r\n    sfIdle: SpriteFrame[] = [];\r\n\r\n    @property([SpriteFrame])\r\n    sfWalk: SpriteFrame[] = [];\r\n\r\n    @property([SpriteFrame])\r\n    sfFire: SpriteFrame[] = [];\r\n\r\n    animIdleTime: number = 1;\r\n\r\n    animWalkTime: number = 1;\r\n\r\n    moveComp: MoveComponent = null;\r\n\r\n    transformComp: TransformComponent = null;\r\n\r\n    backupTransformComp: TransformComponent = null;\r\n\r\n    fireComp: FireComponent = null;\r\n\r\n    machine: GameActorMachine = null;\r\n\r\n    start() {\r\n        this.transformComp = this.entity.getComponent(TransformComponent);\r\n        this.moveComp = this.entity.getComponent(MoveComponent);\r\n        this.backupTransformComp = this.entity.getBackupComponent(TransformComponent);\r\n        this.fireComp = this.entity.getComponent(FireComponent);\r\n\r\n        this.machine = new GameActorMachine(this);\r\n\r\n        this.machine.changeState(new GameActorIdle());\r\n    }\r\n\r\n\r\n    private tempVec3 = v3();\r\n\r\n    private tempBackupVec3 = v3();\r\n\r\n    private outVec3 = v3();\r\n\r\n    update(deltaTime: number) {\r\n        let isMove = this.checkIsMove();\r\n        let isFire = this.checkIsFire();\r\n        if (isFire && this.machine.state.type !== StateType.FIRE) {\r\n            this.machine.changeState(new GameActorFire());\r\n        } else if (!isFire && isMove && this.machine.state.type != StateType.WALK) {\r\n            this.machine.changeState(new GameActorWalk());\r\n        } else if (!isFire && !isMove && this.machine.state.type != StateType.IDLE) {\r\n            this.machine.changeState(new GameActorIdle());\r\n        }\r\n\r\n\r\n        let pos = this.transformComp.position;\r\n        this.tempVec3.set(pos.x, pos.y, pos.z);\r\n        pos = this.backupTransformComp.position;\r\n        this.tempBackupVec3.set(pos.x, pos.y, pos.z);\r\n        Vec3.lerp(this.outVec3, this.tempBackupVec3, this.tempVec3, World.instance.uiLerpValue);\r\n\r\n        this.node.position = this.outVec3;\r\n\r\n        this.machine.update(deltaTime);\r\n    }\r\n\r\n    checkIsMove() {\r\n        return !this.transformComp.position.equal(this.backupTransformComp.position);\r\n    }\r\n\r\n    checkIsFire() {\r\n        return this.fireComp.isFire;\r\n    }\r\n}\r\n\r\n\r\n"]}